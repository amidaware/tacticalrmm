###################
#  CFG file info  #
###################

CFG_VERSION="8"


################
#  User Input  #
################

# Create usernames and passwords
generateUsersAndPass()
{
    # generate django key and admin url
    DJANGO_SEKRET=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 80 | head -n 1)
    ADMINURL=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 70 | head -n 1)

    # prompt to see if user wants to manually enter info or have it generated
    if [ "$autoinstall" == "1" ]; then
        MESHPASSWD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 25 | head -n 1)
        pgusername=$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)
        pgpw=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1)
        meshusername=$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)
    else
        dialog --cr-wrap --clear --yes-label "Automatic" --no-label "Manual" --backtitle "Tactical RMM Installation and Maintenance Utility" --title "User and Password Generation" --yesno "Would you like to have usernames and passwords automatically randomly generated, or enter your own manually?" 0 0
        case $? in
            # auto gen info for user
            0 ) MESHPASSWD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 25 | head -n 1)
                pgusername=$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)
                pgpw=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1)
                meshusername=$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)
                clear -x;;

            1 ) userconfirm="n"

                # Get MeshCentral admin username
                until [ "$userconfirm" == "y" ]; do
                    meshusername=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "MeshCentral Admin" --inputbox "Enter the MeshCentral Admin username you wish to use:" 10 90 3>&1 1>&2 2>&3)
                    dialog --cr-wrap --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "MeshCentral Admin" --yesno "Is this correct?\n$meshusername" 0 0
                    case $? in
                        0 ) userconfirm="y";;

                        1 ) userconfirm="n"
                            derpDerp;;
                    esac
                done
                userconfirm="n"

                # Get MeshCentral admin password
                MESHPASSWD="dont"
                passinput="match"
                until [ "$passinput" == "$MESHPASSWD" ]; do
                    MESHPASSWD=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "MeshCentral Admin Password" --passwordbox "Enter the MeshCentral Admin password you wish to use:" 10 90 3>&1 1>&2 2>&3)
                    passinput=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "MeshCentral Admin Password" --passwordbox "Re-enter the MeshCentral Admin password you wish to use:" 10 90 3>&1 1>&2 2>&3)
                    if [ "$passinput" != "$MESHPASSWD" ]; then
                        dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "Passwords do not match." 0 0
                        derpDerp;
                    else
                        dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "SUCCESS" --msgbox "Passwords match." 0 0
                    fi
                done

                # Get Postgresql admin username
                until [ "$userconfirm" == "y" ]; do
                    pgusername=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Postgresql Admin" --inputbox "Enter the Postgresql Admin username you wish to use:" 10 90 3>&1 1>&2 2>&3)
                    dialog --cr-wrap --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Postgresql Admin" --yesno "Is this correct?\n$pgusername" 0 0
                    case $? in
                        0 ) userconfirm="y";;

                        1 ) userconfirm="n"
                            derpDerp;;
                    esac
                done
                userconfirm="n"

                # Get Postgresql admin password
                pgpw="dont"
                passinput="match"
                until [ "$passinput" == "$pgpw" ]; do
                    pgpw=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Postgresql Admin Password" --passwordbox "Enter the Postgresql Admin password you wish to use:" 10 90 3>&1 1>&2 2>&3)
                    passinput=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Postgresql Admin Password" --passwordbox "Re-enter the Postgresql Admin password you wish to use:" 10 90 3>&1 1>&2 2>&3)
                    if [ "$passinput" != "$pgpw" ]; then
                        dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "Passwords do not match." 0 0
                        derpDerp;
                    else
                        dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "SUCCESS" --msgbox "Passwords match." 0 0
                    fi
                done
                clear -x;;
        esac
    fi
}

# Check subdomain provided is valid format
subdomainCheck()
{
    if [[ $1 = *[.]*[.]* ]] || [[ $1 = *[.]* ]]; then
        echo -e "Error: The $2 hostname/subdomain you provided is in the incorrect format."
        echo -e "\n"
        echo -e "Do not include the root domain."
        echo -e "\n"
		echo -e "Run .$THIS_SCRIPT -h for further details."
		clear -x
		exit 1
    fi
}

# Check cert file exists
checkCertExists()
{
    if [ ! -f "$1" ]; then
        echo -e "Error: The $2 path and/or filename you provided is invalid."
        echo -e "\n"
		echo -e "Run .$THIS_SCRIPT -h for further details."
		clear -x
		exit 1
    fi
}

# Get host and domain info
getHostAndDomainInfo()
{
    if [ "$autoinstall" != "1" ]; then
        hostsconfirm="n"

        until [ $hostsconfirm == "y" ]; do
            rootdomain="none"
            letsemail="none"
        
            # Get root domain
            while [[ $rootdomain != *[.]* ]]; do
                rootdomain=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Enter Root Domain" --inputbox "Enter the root domain (eg example.com or example.co.uk):" 10 90 3>&1 1>&2 2>&3)
                rootdomain="$(translateToLowerCase $rootdomain)"
                if [[ $rootdomain != *[.]* ]]; then
                    derpDerp;
                fi
            done

            # Get backend hostname
            rmmhost=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Enter Backend Hostname" --inputbox "Enter the hostname for the backend (e.g. api):" 10 90 3>&1 1>&2 2>&3)
            rmmhost="$(translateToLowerCase $rmmhost)"

            # Get frontend hostname
            frontendhost=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Enter Frontend Hostname" --inputbox "Enter the hostname for the frontend (e.g. rmm):" 10 90 3>&1 1>&2 2>&3)
            frontendhost="$(translateToLowerCase $frontendhost)"

            # Get MeshCentral hostname
            meshhost=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Enter MeshCentral Hostname" --inputbox "Enter the hostname for MeshCentral (e.g. mesh):" 10 90 3>&1 1>&2 2>&3)
            meshhost="$(translateToLowerCase $meshhost)"

            if [ "$1" != "TS" ]; then
                # Get Admin email
                while [[ $letsemail != *[@]*[.]* ]]; do
                    letsemail=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Enter Admin E-Mail Address" --inputbox "Enter a valid e-mail address for Django, MeshCentral, and LetsEncrypt:" 10 90 3>&1 1>&2 2>&3)
                    letsemail="$(translateToLowerCase $letsemail)"
                    if [[ $letsemail != *[@]*[.]* ]]; then
                        derpDerp;
                    fi
                done

                # Verify input
                dialog --cr-wrap --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Confirm Input" --yesno "Is this correct?\n\nroot domain: $rootdomain\nbackend: $rmmhost.$rootdomain\nfrontend: $frontendhost.$rootdomain\nmeshcentral: $meshhost.$rootdomain\ne-mail address: $letsemail" 0 0
                case $? in
                    0 ) hostsconfirm="y";;

                    1 ) hostsconfirm="n"
                        derpDerp;;
                esac
            fi
        done
        clear -x
    fi
    
    if [ "$1" != "TS" ]; then
        # Combine host/domain entries for later use while keeping seperate entries as well
        rmmdomain="$rmmhost.$rootdomain"
        meshdomain="$meshhost.$rootdomain"
        frontenddomain="$frontendhost.$rootdomain"
    fi
}
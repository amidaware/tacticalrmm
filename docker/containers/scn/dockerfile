# creates python virtual env
FROM python:3.11.8-slim AS CREATE_VENV_STAGE

ARG DEBIAN_FRONTEND=noninteractive

# # set env variables
ENV VIRTUAL_ENV /opt/venv
ENV scn_DIR /opt/scn
ENV scn_TMP_DIR /tmp/scn
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH "${VIRTUAL_ENV}/bin:$PATH"

SHELL ["/bin/bash", "-e", "-o", "pipefail", "-c"]

COPY api/scnrmm/requirements.txt ${scn_TMP_DIR}/api/requirements.txt

RUN apt-get update && \
    apt-get install -y --no-install-recommends gcc libc6-dev && \
    pip install pip==25.1 && \
    pip install --no-cache-dir setuptools wheel && \
    pip install --no-cache-dir -r ${scn_TMP_DIR}/api/requirements.txt

# pulls community scripts from git repo
FROM python:3.11.8-slim AS GET_SCRIPTS_STAGE

RUN apt-get update && \
    apt-get install -y --no-install-recommends git && \
    git clone https://github.com/ahmetkarakayaoffical/scnrmmcommunity-scripts.git /community-scripts

# runtime image
FROM python:3.11.8-slim

# set env variables
ENV VIRTUAL_ENV /opt/venv
ENV scn_DIR /opt/scn
ENV scn_TMP_DIR /tmp/scn
ENV scn_READY_FILE ${scn_DIR}/tmp/scn.ready
ENV scn_USER scn
ENV PATH "${VIRTUAL_ENV}/bin:$PATH"

# copy files from repo
COPY api/scnrmm ${scn_TMP_DIR}/api
COPY --from=GET_SCRIPTS_STAGE /community-scripts ${scn_TMP_DIR}/community-scripts

# copy go install from build stage
COPY --from=CREATE_VENV_STAGE ${VIRTUAL_ENV} ${VIRTUAL_ENV}

# install deps
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends rsync weasyprint && \
    rm -rf /var/lib/apt/lists/* && \
    groupadd -g 1000 "${scn_USER}" && \
    useradd -M -d "${scn_DIR}" -s /bin/bash -u 1000 -g 1000 "${scn_USER}"

SHELL ["/bin/bash", "-e", "-o", "pipefail", "-c"]

# docker init
COPY docker/containers/scn/entrypoint.sh /
RUN chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]

WORKDIR ${scn_DIR}/api

EXPOSE 8080 4443 8383

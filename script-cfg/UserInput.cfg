###################
#  CFG file info  #
###################

CFG_VERSION="8"


################
#  User Input  #
################

# Create usernames and passwords
generateUsersAndPass()
{
    if [ "$1" != "devprep" ]; then
        # generate django key and admin url
        DJANGO_SEKRET=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 80 | head -n 1)
        ADMINURL=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 70 | head -n 1)

        # prompt to see if user wants to manually enter info or have it generated
        if [ "$autoinstall" == "1" ]; then
            MESHPASSWD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 25 | head -n 1)
            pgusername=$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)
            pgpw=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1)
            meshusername=$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)
        else
            dialog --cr-wrap --clear --yes-label "Automatic" --no-label "Manual" --backtitle "Tactical RMM Installation and Maintenance Utility" --title "User and Password Generation" --yesno "Would you like to have Postgresql and MeshCentral usernames and passwords automatically randomly generated, or enter your own manually?" 0 0
            case $? in
                # auto gen info for user
                0 ) MESHPASSWD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 25 | head -n 1)
                    pgusername=$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)
                    pgpw=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1)
                    meshusername=$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)
                    clear -x;;

                1 ) userconfirm="n"

                    # Get MeshCentral admin username
                    until [ "$userconfirm" == "y" ]; do
                        meshusername=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "MeshCentral Admin" --inputbox "Enter the MeshCentral Admin username you wish to use:" 10 90 3>&1 1>&2 2>&3)
                        dialog --cr-wrap --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "MeshCentral Admin" --yesno "Is this correct?\n$meshusername" 0 0
                        case $? in
                            0 ) userconfirm="y";;

                            1 ) userconfirm="n"
                                derpDerp;;
                        esac
                    done
                    userconfirm="n"

                    # Get MeshCentral admin password
                    MESHPASSWD="dont"
                    passinput="match"
                    until [ "$passinput" == "$MESHPASSWD" ]; do
                        MESHPASSWD=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "MeshCentral Admin Password" --passwordbox "Enter the MeshCentral Admin password you wish to use:" 10 90 3>&1 1>&2 2>&3)
                        passinput=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "MeshCentral Admin Password" --passwordbox "Re-enter the MeshCentral Admin password you wish to use:" 10 90 3>&1 1>&2 2>&3)
                        if [ "$passinput" != "$MESHPASSWD" ]; then
                            dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "Passwords do not match." 0 0
                            derpDerp;
                        else
                            dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "SUCCESS" --msgbox "Passwords match." 0 0
                        fi
                    done

                    # Get Postgresql admin username
                    until [ "$userconfirm" == "y" ]; do
                        pgusername=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Postgresql Admin" --inputbox "Enter the Postgresql Admin username you wish to use:" 10 90 3>&1 1>&2 2>&3)
                        dialog --cr-wrap --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Postgresql Admin" --yesno "Is this correct?\n$pgusername" 0 0
                        case $? in
                            0 ) userconfirm="y";;

                            1 ) userconfirm="n"
                                derpDerp;;
                        esac
                    done
                    userconfirm="n"

                    # Get Postgresql admin password
                    pgpw="dont"
                    passinput="match"
                    until [ "$passinput" == "$pgpw" ]; do
                        pgpw=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Postgresql Admin Password" --passwordbox "Enter the Postgresql Admin password you wish to use:" 10 90 3>&1 1>&2 2>&3)
                        passinput=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Postgresql Admin Password" --passwordbox "Re-enter the Postgresql Admin password you wish to use:" 10 90 3>&1 1>&2 2>&3)
                        if [ "$passinput" != "$pgpw" ]; then
                            dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "Passwords do not match." 0 0
                            derpDerp;
                        else
                            dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "SUCCESS" --msgbox "Passwords match." 0 0
                        fi
                    done
                    clear -x;;
            esac
        fi
    fi
}

# Check subdomain provided is valid format
subdomainFormatCheck()
{
    if [[ $(grep "\." <<< "$1") ]] 2>/dev/null; then
        echo -e "${RED} Error: The $2 hostname/subdomain you provided is in the incorrect format.${NC}\n"
        echo -e "${RED} Do not include the root domain.${NC}\n"
		echo -e "${RED} Run $THIS_SCRIPT -h help for further details.${NC}\n"
        echo -e "${RED} Exiting...${NC}\n"
		exit 1
    else
        echo -e "${GREEN} $2 hostname format ok.${NC}\n"
    fi
}

# Check root domain format
rootDomainFormatCheck()
{
    if [[ $(grep "\." <<< "$1") ]] 2>/dev/null; then
        echo -e "${GREEN} Root domain format ok.${NC}\n"
    else
        echo -e "${RED} Error: The root domain you provided is in the incorrect format.${NC}\n"
		echo -e "${RED} Run $THIS_SCRIPT -h help for further details.${NC}\n"
        echo -e "${RED} Exiting...${NC}\n"
		exit 1
    fi
}

# Check host/domain entries exist in DNS
checkDNSEntriesExist()
{
    if [[ $(dig +noall +answer $1) ]] 2>/dev/null; then
        echo -e "${GREEN} DNS record for $1 exists.${NC}\n"
    else
        echo -e "${RED} Error: $1 does not resolve via DNS.${NC}\n"
	    echo -e "${RED} Please correct the issue and run $THIS_SCRIPT again.${NC}\n"
        echo -e "${RED} Exiting...${NC}\n"
		exit 1
    fi
}

# Check root domain
rootdomaincheck()
{
    local goodrootdomain=$(grep "\." <<< "$1" )
    if [[ $goodrootdomain ]]; then
        return 0
    else
        if [ "$autoinstall" == "1" ]; then
        	echo -e "Error: You've entered an invalid root domain."
		    echo -e "\n"
		    echo -e "Run .$THIS_SCRIPT -h for details on the correct format."
		    clear -x
		    exit 1
        else
            dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "You've entered an invalid root domain.\n\nPlease try again." 10 40
            return 1
        fi
    fi
}

# Check cert file exists
checkCertExists()
{
    if [ ! -f "$1" ]; then
        echo -e "${RED} Error: The $2 path and/or filename you provided is invalid.${NC}\n"
		echo -e "${RED} Run $THIS_SCRIPT -h help for further details.${NC}\n"
        echo -e "${RED} Exiting...${NC}\n"
		exit 1
    else
        echo -e "${GREEN} The $2 path you provided is valid.${NC}\n"
    fi
}

# Get email address
getEmailAddress()
{
    # Get Admin email
    while [[ $letsemail != *[@]*[.]* ]]; do
        letsemail=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Enter Admin E-Mail Address" --inputbox "Enter a valid e-mail address for Django, MeshCentral, and LetsEncrypt:" 10 90 3>&1 1>&2 2>&3)
        letsemail="$(translateToLowerCase $letsemail)"
        if [[ $letsemail != *[@]*[.]* ]]; then
            derpDerp;
            dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "The e-mail address you entered is not correctly formatted.\n\nPlease try again." 0 0
        fi
    done
}

# Get host and domain info
getHostAndDomainInfo()
{
    if [ "$autoinstall" != "1" ]; then
        hostsconfirm="n"

        until [ "$hostsconfirm" == "y" ]; do
            rootdomain="none"
            letsemail="none"
            local dnsgood="n"
        
            # Get root domain
            while [[ "$rootdomain" == "none" ]]; do
                rootdomain=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Enter Root Domain" --inputbox "Enter the root domain (eg example.com or example.co.uk):" 10 90 3>&1 1>&2 2>&3)
                rootdomain="$(translateToLowerCase $rootdomain)"
                if [[ $(grep "\." <<< "$rootdomain") ]] 2>/dev/null; then
                    echo -e ""
                else
                    rootdomain="none"
                    derpDerp;
                    dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "The root domain you provided is in the incorrect format\n\nPlease try again." 0 0
                fi
            done

            # Get backend hostname
            until [ $dnsgood == "y" ]; do
                rmmhost=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Enter Backend Hostname" --inputbox "Enter the hostname for the backend (e.g. api):" 10 90 3>&1 1>&2 2>&3)
                rmmhost="$(translateToLowerCase $rmmhost)"
                if [[ $(grep "\." <<< "$rmmhost") ]] 2>/dev/null; then
                    derpDerp;
                    dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "The backend hostname/subdomain you provided is in the incorrect format.\n\nDo not include the root domain.\n\nPlease try again." 0 0
                    dnsgood="n"
                else
                    rmmdomain="$rmmhost.$rootdomain"
                    if [[ $(dig +noall +answer $rmmdomain) ]] 2>/dev/null; then
                        dnsgood="y"
                    else
                        derpDerp;
                        dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "$rmmdomain does not resolve via DNS.\n\nPlease correct the issue before trying again." 0 0
                        dnsgood="n"
                    fi
                fi
            done
            dnsgood="n"

            # Get frontend hostname
            until [ $dnsgood == "y" ]; do
                frontendhost=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Enter Frontend Hostname" --inputbox "Enter the hostname for the frontend (e.g. rmm):" 10 90 3>&1 1>&2 2>&3)
                frontendhost="$(translateToLowerCase $frontendhost)"
                if [[ $(grep "\." <<< "$frontendhost") ]] 2>/dev/null; then
                    derpDerp;
                    dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "The frontend hostname/subdomain you provided is in the incorrect format.\n\nDo not include the root domain.\n\nPlease try again." 0 0
                    dnsgood="n"
                else
                    frontenddomain="$frontendhost.$rootdomain"
                    if [[ $(dig +noall +answer $frontenddomain) ]] 2>/dev/null; then
                        dnsgood="y"
                    else
                        derpDerp;
                        dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "$frontenddomain does not resolve via DNS.\n\nPlease correct the issue before trying again." 0 0
                        dnsgood="n"
                    fi
                fi
            done
            dnsgood="n"

            # Get MeshCentral hostname
            until [ $dnsgood == "y" ]; do
                meshhost=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Enter MeshCentral Hostname" --inputbox "Enter the hostname for MeshCentral (e.g. mesh):" 10 90 3>&1 1>&2 2>&3)
                meshhost="$(translateToLowerCase $meshhost)"
                if [[ $(grep "\." <<< "$meshhost") ]] 2>/dev/null; then
                    derpDerp;
                    dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "The meshcentral hostname/subdomain you provided is in the incorrect format.\n\nDo not include the root domain.\n\nPlease try again." 0 0
                    dnsgood="n"
                else
                    meshdomain="$meshhost.$rootdomain"
                    if [[ $(dig +noall +answer $meshdomain) ]] 2>/dev/null; then
                        dnsgood="y"
                    else
                        derpDerp;
                        dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "$meshdomain does not resolve via DNS.\n\nPlease correct the issue before trying again." 0 0
                        dnsgood="n"
                    fi
                fi
            done

            if [ "$troubleshoot" != "1" ]; then
                # Get Admin email
                getEmailAddress;

                # Verify input
                dialog --cr-wrap --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Confirm Input" --yesno "Is this correct?\n\nroot domain: $rootdomain\nbackend: $rmmhost.$rootdomain\nfrontend: $frontendhost.$rootdomain\nmeshcentral: $meshhost.$rootdomain\ne-mail address: $letsemail" 0 0
                case $? in
                    0 ) hostsconfirm="y";;

                    1 ) hostsconfirm="n"
                        derpDerp;;
                esac
            fi
        done
        clear -x
    fi
}
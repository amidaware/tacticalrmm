###################
#  CFG file info  #
###################

CFG_VERSION="8"


###########################################
#  Update and Restore specific functions  #
###########################################

# Check that user is same as during install
checkSameUser()
{
    strip="User="
    if [ "$1" == "update" ]; then
        ORIGUSER=$(grep ${strip} /etc/systemd/system/rmm.service | sed -e "s/^${strip}//")
    elif [ "$1" == "restore" ]; then
        ORIGUSER=$(grep ${strip} "$tmp_dir"/systemd/rmm.service | sed -e "s/^${strip}//")
    fi
    if [ "$ORIGUSER" != "$USER" ]; then
        if [ "$autoinstall" == "1" ]; then
            echo -e "${RED} You must run this update script from the same user account used during install: ${ORIGUSER} ${NC}" | tee -a "${currentlog}"
            echo -e "${RED} Exiting... ${NC}" | tee -a "${currentlog}"
            if [ "$1" == "restore" ]; then
                rm -rf "$tmp_dir" 2>&1 | tee -a "${currentlog}"
            fi
            exit 1
        elif [ "$autoinstall" != "1" ]; then
            dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "You must run this update script from the same user account used during install: ${ORIGUSER}\n\nExiting." 0 0
            if [ "$1" == "restore" ]; then
                rm -rf "$tmp_dir" 2>&1 | tee -a "${currentlog}"
            fi
            clear -x
            exit 1
        fi
    fi
}

# Check if T-RMM update is necessary
checkIfUpdate()
{
    TMP_SETTINGS=$(mktemp -p "" "rmmsettings_XXXXXXXXXX")
    curl -s -L "${LATEST_SETTINGS_URL}" > "$TMP_SETTINGS"

    LATEST_TRMM_VER=$(grep "^TRMM_VERSION" "$TMP_SETTINGS" | awk -F'[= "]' '{print $5}')
    CURRENT_TRMM_VER=$(grep "^TRMM_VERSION" "$SETTINGS_FILE" | awk -F'[= "]' '{print $5}')

    if [ "${CURRENT_TRMM_VER}" == "${LATEST_TRMM_VER}" ] && [ "$UPDATE_TYPE" == "standard" ]; then
        echo -e "${GREEN} Already on latest version. Current version:${NC} ${YELLOW}${CURRENT_TRMM_VER}${NC} ${GREEN}Latest version:${NC} ${YELLOW}${LATEST_TRMM_VER} ${NC}" | tee -a "${currentlog}"
        rm -f "$TMP_SETTINGS" 2>&1 | tee -a "${currentlog}"
        exit 0
    fi
}

# Get current versions of necessary included apps
checkAdditionalAppsVers()
{
    LATEST_MESH_VER=$(grep "^MESH_VER" "$TMP_SETTINGS" | awk -F'[= "]' '{print $5}')
    LATEST_PIP_VER=$(grep "^PIP_VER" "$TMP_SETTINGS" | awk -F'[= "]' '{print $5}')
    NATS_SERVER_VER=$(grep "^NATS_SERVER_VER" "$TMP_SETTINGS" | awk -F'[= "]' '{print $5}')
    CURRENT_PIP_VER=$(grep "^PIP_VER" "$SETTINGS_FILE" | awk -F'[= "]' '{print $5}')
}

# Check CHECK_NATS_LIMITNOFILE, whatever that means
checkNatsLimitNoFile()
{
    CHECK_NATS_LIMITNOFILE=$(grep LimitNOFILE /etc/systemd/system/nats.service)
    if ! [ "$CHECK_NATS_LIMITNOFILE" ]; then
        sudo rm -f /etc/systemd/system/nats.service 2>&1 | tee -a "${currentlog}"
        # 09-ConfigAndServiceFunctions
        createNatsService;
        sudo systemctl daemon-reload 2>&1 | tee -a "${currentlog}"
    fi
}

# Disable Redis append only
turnOffRedisAppendOnly()
{
    echo -e "${GREEN} Turning off redis aof ${NC}\n" | tee -a "${currentlog}"
    sudo redis-cli config set appendonly no 2>&1 | tee -a "${currentlog}"
    sudo redis-cli config rewrite 2>&1 | tee -a "${currentlog}"
    sudo rm -f /var/lib/redis/appendonly.aof 2>&1 | tee -a "${currentlog}"
}

# Update MeshCentral
updateMeshCentral()
{
    CURRENT_MESH_VER=$(cd /meshcentral/node_modules/meshcentral && node -p -e "require('./package.json').version")
    if [ "${CURRENT_MESH_VER}" != "${LATEST_MESH_VER}" ] || [ "$UPDATE_TYPE" = "forced" ]; then
        echo -e "${GREEN} Updating meshcentral from ${CURRENT_MESH_VER} to ${LATEST_MESH_VER} ${NC}\n" | tee -a "${currentlog}"
        sudo systemctl stop meshcentral 2>&1 | tee -a "${currentlog}"
        sudo chown "${USER}:${USER}" -R /meshcentral 2>&1 | tee -a "${currentlog}"
        cd /meshcentral
        rm -rf node_modules/ 2>&1 | tee -a "${currentlog}"
        npm install meshcentral@"${LATEST_MESH_VER}" 2>&1 | tee -a "${currentlog}"
        sudo chown "${USER}:${USER}" -R /meshcentral 2>&1 | tee -a "${currentlog}"
    fi
}

# Get backup location
getBackupFileLocation()
{
    if [ "$autoinstall" == "1" ]; then
        return
    elif [ "$autoinstall" != "1" ]; then
        userconfirm="n"

        until [ "$userconfirm" == "y" ]; do
            backupfile=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Enter Path to Backup File" --inputbox "Enter the full path to the backup file, including filename:" 10 90 3>&1 1>&2 2>&3)
            dialog --cr-wrap --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Backup File Path" --yesno "Is this correct?\n$backupfile" 0 0
            case $? in
                0 ) userconfirm="y";;

                1 ) userconfirm="n"
                    derpDerp;;
            esac
            if [ ! -f "$backupfile" ]; then
                userconfirm="n"
                derpDerp;
            else
                userconfirm="y"
            fi
        done
        userconfirm="n"
    fi
}

# Extract backup
extractBackup()
{
    echo -e "\n${GREEN} Unpacking backup... ${NC}\n" | tee -a "${currentlog}"
    tmp_dir=$(mktemp -d -t tacticalrmm-XXXXXXXXXXXXXXXXXXXXX)

    tar -xf "$1" -C "$tmp_dir" 2>&1 | tee -a "${currentlog}"
}
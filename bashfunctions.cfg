########################
#  Input verification  #
########################

# Translate user input to all lower case to prevent ID10T errors
translateToLowerCase()
{
	local lowercase=""
	lowercase="$(echo $1 | tr '[:upper:]' '[:lower:]')"
	echo "$lowercase"
}

#########################################################################
#  Misc Functions, must be before any but input verification functions  #
#########################################################################

# Set bash text colors
setColors()
{
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    RED='\033[0;31m'
    NC='\033[0m'
}

# Not defined
cls()
{
  printf "\033c"
}

# Purty install text
print_green()
{
  printf >&2 "${GREEN}%0.s-${NC}" {1..80}
  printf >&2 "\n"
  printf >&2 "${GREEN}${1}${NC}\n"
  printf >&2 "${GREEN}%0.s-${NC}" {1..80}
  printf >&2 "\n"
}

# Check for new script version
checkScriptVer()
{
    TMP_FILE=$(mktemp -p "" "rmminstall_XXXXXXXXXX")
    curl -s -L "${SCRIPT_URL}" > ${TMP_FILE}
    NEW_VER=$(grep "^SCRIPT_VERSION" "$TMP_FILE" | awk -F'[="]' '{print $3}')

    if [ "${SCRIPT_VERSION}" -ne "${NEW_VER}" ]; then
        printf >&2 "${YELLOW}Old install script detected, downloading and replacing with the latest version...${NC}\n"
        wget -q "${SCRIPT_URL}" -O install.sh
        printf >&2 "${YELLOW}Script updated! Please re-run ./install.sh${NC}\n"
        rm -f $TMP_FILE
        exit 1
    fi

    rm -f $TMP_FILE
}

# Check for root as user
checkRoot()
{
    if [ $EUID -eq 0 ]; then
        echo -e "${RED}Do NOT run this script as root. Exiting.${NC}"
        exit 1
    fi
}


###########################
#  System info functions  #
###########################

# Gather OS info
getOSInfo()
{
    osname=$(lsb_release -si); osname=${osname^}
    osname=$(echo "$osname" | tr  '[A-Z]' '[a-z]')
    fullrel=$(lsb_release -sd)
    codename=$(lsb_release -sc)
    relno=$(lsb_release -sr | cut -d. -f1)
    fullrelno=$(lsb_release -sr)
}

# Check OS if not recognised
wutOSThis()
{
    if [ ! "$osname" = "ubuntu" ] && [ ! "$osname" = "debian" ]; then
        osname=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '"')
        osname=${osname^}
    fi
}

# Verify Debian or Ubuntu and version
verifySupportedOS()
{
    if ([ "$osname" = "ubuntu" ] && ([ "$fullrelno" = "20.04" ] || [ "$fullrelno" = "22.04" ])) || ([ "$osname" = "debian" ] && [ $relno -ge 10 ]); then
        echo $fullrel
    else
        echo $fullrel
        echo -e "${RED}Supported versions: Ubuntu 20.04 and 22.04, Debian 10 and 11.${NC}"
        echo -e "${RED}Your system does not appear to be supported.${NC}"
        exit 1
    fi
}

# Check language/locale
checkLocale()
{
    if [[ "$LANG" != *".UTF-8" ]]; then
        printf >&2 "\n${RED}System locale must be ${GREEN}<some language>.UTF-8${RED} not ${YELLOW}${LANG}${NC}\n"
        printf >&2 "${RED}Run the following command and change the default locale to your language of choice${NC}\n\n"
        printf >&2 "${GREEN}sudo dpkg-reconfigure locales${NC}\n\n"
        printf >&2 "${RED}You will need to log out and back in for changes to take effect, then re-run this script.${NC}\n\n"
        exit 1
    fi
}

#######################
#  Install Functions  #
#######################

# Install script prereqs
installPreReqs()
{
    sudo apt update && sudo apt install -y curl wget dirmngr gnupg lsb-release
}

# Install remaining prereqs
installAdditionalPreReqs()
{
    sudo apt install -y software-properties-common openssl ca-certificates apt-transport-https gcc g++ make build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev libbz2-dev git
}

# Configure repos for stuff
setInstallRepos()
{
    # There is no Jammy repo yet so use Focal for Ubuntu 22.04
    if ([ "$osname" = "ubuntu" ] && [ "$fullrelno" = "20.04" ]); then
        mongodb_repo="deb [arch=amd64] https://repo.mongodb.org/apt/$osname $codename/mongodb-org/4.4 multiverse"
    elif ([ "$osname" = "ubuntu" ] && [ "$fullrelno" = "22.04" ]); then
        codename="focal"
        mongodb_repo="deb [arch=amd64] https://repo.mongodb.org/apt/$osname $codename/mongodb-org/4.4 multiverse"
    # There is no bullseye repo yet for mongo so just use Buster on Debian 11
    elif ([ "$osname" = "debian" ] && [ $relno -eq 10 ]); then
        mongodb_repo="deb [arch=amd64] https://repo.mongodb.org/apt/$osname $codename/mongodb-org/4.4 main"
    else
        codename="buster"
        mongodb_repo="deb [arch=amd64] https://repo.mongodb.org/apt/$osname $codename/mongodb-org/4.4 main"
    fi

    postgresql_repo="deb [arch=amd64] https://apt.postgresql.org/pub/repos/apt/ $codename-pgdg main"
}


################
#  User Input  #
################

# Create usernames and passwords
generateUsersAndPass()
{
    manualpass="derp"

    DJANGO_SEKRET=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 80 | head -n 1)
    ADMINURL=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 70 | head -n 1)

    echo " "
    echo -ne "${YELLOW}If you would like to manually enter MeshCentral and Postgresql usernames and passwords${NC}\n"
    echo -ne "${YELLOW}type m or manual at the prompt, or simply press enter to have them randomly generated for you${NC}: "
    read manualpass
    manualpass="$(translateToLowerCase $manualpass)"
    echo " "

    if ([ "$manualpass" != "m" ] && [ "$manualpass" != "manual" ]); then
        MESHPASSWD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 25 | head -n 1)
        pgusername=$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)
        pgpw=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1)
        meshusername=$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)
    
    elif ([ "$manualpass" == "m" ] || [ "$manualpass" == "manual" ]); then
        passinput=""
        userconfirm="n"
        MESHPASSWD=""
        pgusername=""
        pgpw=""
        meshusername=""

        until [ "$userconfirm" == "y" ]; do
            echo " "
            echo -ne "${YELLOW}Enter the MeshCentral admin username${NC}: "
            read meshusername
            echo " "
            echo -ne "${YELLOW}Is this correct? y or n${NC}: $meshusername "
            read userconfirm
            userconfirm="$(translateToLowerCase $userconfirm)"
            echo " "
        done
        userconfirm="n"

        until [ "$passinput" == "$MESHPASSWD" ]; do
            read -s -p "Enter the MeshCentral admin password: " MESHPASSWD
            echo " "
            read -s -p "Re-enter the MeshCentral admin password: " passinput
            if [ "$passinput" != "$MESHPASSWD" ]
                echo " "
                echo -ne "${YELLOW}Passwords do not match. Press any key to try again${NC}: "
                read anykey
            else
                echo " "
            fi
        done

        until [ "$userconfirm" == "y" ]; do
            echo " "
            echo -ne "${YELLOW}Enter the Postgresql admin username${NC}: "
            read pgusername
            echo " "
            echo -ne "${YELLOW}Is this correct? y or n${NC}: $pgusername "
            read userconfirm
            userconfirm="$(translateToLowerCase $userconfirm)"
            echo " "
        done
        userconfirm="n"

        until [ "$passinput" == "$pgpw" ]; do
            read -s -p "${YELLOW}Enter the Postgresql admin password${NC}: " pgpw
            echo " "
            read -s -p "${YELLOW}Re-enter the Postgresql admin password${NC}: " passinput
            if [ "$passinput" != "$pgpw" ]
                echo " "
                read -p "${YELLOW}Passwords do not match. Press any key to try again${NC}: " anykey
            else
                echo " "
            fi
        done
    fi
}

# Get host and domain info
getHostAndDomainInfo()
{
    hostsconfirm="n"

    until [ $hostsconfirm == "y" ]; do
        rootdomain="none"
        while [[ $rootdomain != *[.]* ]]; do
            echo -ne "${YELLOW}Enter the root domain (e.g. example.com or example.co.uk)${NC}: "
            read rootdomain
            rootdomain="$(translateToLowerCase $rootdomain)"
            echo " "
        done

        echo -ne "${YELLOW}Enter the hostname for the backend (e.g. api)${NC}: "
        read rmmhost
        rmmhost="$(translateToLowerCase $rmmhost)"
        echo " "

        echo -ne "${YELLOW}Enter the hostname for the frontend (e.g. rmm)${NC}: "
        read frontendhost
        frontendhost="$(translateToLowerCase $frontendhost)"
        echo " "

        echo -ne "${YELLOW}Enter the hostname for meshcentral (e.g. mesh)${NC}: "
        read meshhost
        meshhost="$(translateToLowerCase $meshhost)"
        echo " "

        while [[ $letsemail != *[@]*[.]* ]]; do
            echo -ne "${YELLOW}Enter a valid e-mail address for django, meshcentral, and letsencrypt${NC}: "
            read letsemail 
            letsemail="$(translateToLowerCase $letsemail)"
            echo " "
        done

        echo " "
        echo "${YELLOW}root domain${NC}: $rootdomain"
        echo "${YELLOW}backend${NC}: $rmmhost.$rootdomain"
        echo "${YELLOW}frontend${NC}: $frontendhost.$rootdomain"
        echo "${YELLOW}meshcentral${NC}: $meshhost.$rootdomain"
        echo "${YELLOW}e-mail address${NC}: $letsemail"
        echo " "
        echo -ne "${YELLOW}Is this correct? y or n${NC}: "
        read hostsconfirm
        hostsconfirm="$(translateToLowerCase $hostsconfirm)"
    done

    rmmdomain="$rmmhost.$rootdomain"
    meshdomain="$meshhost.$rootdomain"
    frontenddomain="$frontendhost.$rootdomain"
}
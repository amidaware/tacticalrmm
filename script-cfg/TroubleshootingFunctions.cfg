###################
#  CFG file info  #
###################

CFG_VERSION="8"


###############################
#  Troubleshooting functions  #
###############################

# Ping to test if domain is live
pingDomain()
{
    if ( ping -c 1 $1 &> /dev/null ); then
        echo -e "${GREEN} Verified $1 by ping.${NC}\n" | tee -a "${currentlog}"
    else
        echo -e "${RED} $1 cannot be verified by ping.${NC}\n" | tee -a "${currentlog}"
    fi
}

# Check IPs
checkIPisLive()
{
    # Resolve Locally used DNS server
    locdns=$(resolvectl | grep 'Current DNS Server:' | cut -d: -f2 | awk '{ print $1}')

    locinputip=`dig @"$locdns" +short $1`
    reminputip=`dig @8.8.8.8 +short $1`

    if [ "$locinputip" == "$reminputip" ]; then
        echo -e "${GREEN} Success $1 is Locally Resolved: ${locinputip}  Remotely Resolved: ${reminputip}${NC}\n" | tee -a "${currentlog}"
    else
	    echo -e "${YELLOW} Locally Resolved: ${locinputip}  Remotely Resolved: ${reminputip}${NC}\n" | tee -a "${currentlog}"
        echo -e "${YELLOW} Your Local and Remote IP for $1 all agents will require non-public DNS to find TRMM server.${NC}\n" | tee -a "${currentlog}"
    fi
}

# Check services status
readServicesStatus()
{
    rmmstatus=$(systemctl is-active rmm)
    daphnestatus=$(systemctl is-active daphne)
    celerystatus=$(systemctl is-active celery)
    celerybeatstatus=$(systemctl is-active celerybeat)
    nginxstatus=$(systemctl is-active nginx)
    natsstatus=$(systemctl is-active nats)
    natsapistatus=$(systemctl is-active nats-api)
    meshcentralstatus=$(systemctl is-active meshcentral)
    mongodstatus=$(systemctl is-active mongod)
    postgresqlstatus=$(systemctl is-active postgresql)
    redisserverstatus=$(systemctl is-active redis-server)
}

# Verify services active
checkIfServiceActive()
{
    if [ $1 = active ]; then
        echo -e "${GREEN} Success $2 is Running.${NC}\n" | tee -a "${currentlog}"
    else
        echo -e "${RED} $2 is not running. \(Tactical will not work without this\)${NC}\n" | tee -a "${currentlog}"
    fi
}

# Check for open ports
isPortOpen()
{
    if ( nc -zv $wanip $1 2>&1 >/dev/null ); then
        echo -e "${GREEN} $2 Port is open.${NC}\n" | tee -a "${currentlog}"
    else
        echo -e "${YELLOW} $2 port is closed. \(you may want this if running locally only\)${NC}\n" | tee -a "${currentlog}"
    fi
}

# Check proxy
checkProxy()
{
    echo -e "${GREEN} Checking For Proxy.${NC}\n" | tee -a "${currentlog}"
	echo -e "${YELLOW} ......this might take a while!!${NC}"

    # Detect Proxy via cert
    proxyext="$(openssl s_client -showcerts -servername $remapiip -connect $remapiip:443 2>/dev/null | openssl x509 -inform pem -noout -text)"
    proxyint="$(openssl s_client -showcerts -servername 127.0.1.1 -connect 127.0.1.1:443 2>/dev/null | openssl x509 -inform pem -noout -text)"

    if [[ "$proxyext" == "$proxyint" ]]; then
        echo -e "${GREEN} No Proxy detected using Certificate.${NC}\n" | tee -a "${currentlog}"
    else
        echo -e "${YELLOW} Proxy detected using Certificate.${NC}\n" | tee -a "${currentlog}"
    fi

    # Detect Proxy via IP
    if [ "$wanip" != "$remrmmip" ]; then
        echo -e "${YELLOW} Proxy detected using IP.${NC}\n" | tee -a "${currentlog}"
    else
        echo -e "${GREEN} No Proxy detected using IP.${NC}\n" | tee -a "${currentlog}"
    fi
}

# Check for valid cert
checkIfCertIsValid()
{
    echo -e "${YELLOW} Checking if SSL Certificate is up to date.${NC}\n" | tee -a "${currentlog}"

    # SSL Certificate check
    # Check DNS-Manual or imported certs
    if [ ! -f /etc/letsencrypt/renewal-hooks/post/001-restart-services.sh ]; then
        cert="$(openssl verify -partial_chain -CAfile /etc/letsencrypt/live/${rootdomain}/chain.pem /etc/letsencrypt/live/${rootdomain}/fullchain.pem)"
        certexp="$(openssl x509 -enddate -noout -in /etc/letsencrypt/live/${rootdomain}/fullchain.pem | cut -d "=" -f2)"

        if [[ "$cert" == *"OK"* ]]; then
            echo -e "${GREEN} SSL Certificate for $rootdomain is fine.${NC}\n" | tee -a "${currentlog}"
            echo -e "${GREEN} SSL Certificate expires $certexp${NC}\n" | tee -a "${currentlog}"
        else
            echo -e "${RED} SSL Certificate has expired or doesnt exist for $rootdomain.${NC}\n" | tee -a "${currentlog}"
        fi
    # Check Webroot authenticated certs
    elif [ -f /etc/letsencrypt/renewal-hooks/post/001-restart-services.sh ]; then
        cert="$(openssl verify -partial_chain -CAfile /etc/letsencrypt/live/${rootdomain}/chain.pem /etc/letsencrypt/live/${rootdomain}/fullchain.pem)"
        certexp="$(openssl x509 -enddate -noout -in /etc/letsencrypt/live/${rootdomain}/fullchain.pem | cut -d "=" -f2)"
    
        if [[ "$cert" == *"OK"* ]]; then
            echo -e "${GREEN} SSL Certificate for $rmmdomain , $frontenddomain , and $meshdomain is fine.${NC}\n" | tee -a "${currentlog}"
            echo -e "${GREEN} SSL Certificate expires $certexp${NC}\n" | tee -a "${currentlog}"
        else
            echo -e "${RED} SSL Certificate has expired or doesnt exist for $rmmdomain , $frontenddomain , and $meshdomain.${NC}\n" | tee -a "${currentlog}"
        fi
    fi
}

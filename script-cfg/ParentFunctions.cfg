###################
#  CFG file info  #
###################

CFG_VERSION="8"


######################
#  Parent Functions  #
######################

# Main install function
mainInstall()
{
    ### Repo info for Postegres and Mongo
    setInstallRepos;

    ### Create usernames and passwords
    generateUsersAndPass;

    ### This does... something
    cls;

    ### Get host/domain info
    getHostAndDomainInfo;

    ### Configure hosts file
    print_green 'Configuring Hosts file'
    configHosts;

    ### Certificate generation
    print_green 'Installing Certbot'
    installCertbot "$INSTALL_TYPE";

    ### Install Nginx
    print_green 'Installing Nginx'
    installNginx "$INSTALL_TYPE";

    ### Install NodeJS
    print_green 'Installing NodeJS'
    installNodeJS;

    ### Install and enable MongoDB
    print_green 'Installing MongoDB'
    installMongo;

    ### Install Python
    print_green "Installing Python ${PYTHON_VER}"
    installPython "$INSTALL_TYPE";

    ### Installing Redis
    print_green 'Installing redis'
    installRedis;

    ### Install and enable Postgresql
    print_green 'Installing postgresql'
    installPostgresql;

    ### Postgres DB creation
    print_green 'Creating database for the rmm'
    createPGDB;

    ### Clone main repo
    print_green 'Cloning primary repo'
    clonePrimaryRepo "$INSTALL_TYPE" "$REPO_URL" "$BRANCH";
  
    ### Clone scripts repo
    print_green 'Cloning community scripts repo'
    cloneScriptsRepo "$INSTALL_TYPE" "$SCRIPTS_REPO_URL";

    ### Installing NATS
    print_green 'Installing NATS'
    installNats "$INSTALL_TYPE";

    ### Install MeshCentral
    print_green 'Installing MeshCentral'
    installMeshCentral "$INSTALL_TYPE";
  
    ### Create MeshCentral config
    print_green 'Generating MeshCentral Config'
    createMeshConfig;

    ### Create local settings file
    print_green 'Generating Local Settings'
    createLocalSettings;

    ### Install NATS-API and correct permissions
    print_green 'Installing NATS API'
    installNatsApi;

    ### Install backend, configure primary admin user, setup admin 2fa
    print_green 'Installing the backend'
    configureBackend;
    
    ### Determine Proc setting for UWSGI
    print_green 'Optimizing UWSGI for number of processors'
    setUwsgiProcs;

    ### Create UWSGI config
    print_green 'Creating UWSGI configuration'
    createUwsgiConf;

    ### Create RMM UWSGI systemd service
    print_green 'Creating UWSGI service'
    createUwsgiService;

    ### Create Daphne systemd service
    print_green 'Creating Daphne service'
    createDaphneService;

    ### Create NATS systemd service
    print_green 'Creating NATS service'
    createNatsService;

    ### Create NATS-api systemd service
    print_green 'Creating NATS-API service'
    createNatsApiService;

    ### Create Backend Nginx site config
    print_green 'Creating Backend Nginx config'
    createBackendNginxConf;

    ### Create MeshCentral Nginx configuration
    print_green 'Creating MeshCentral Nginx config'
    createMeshNginxConf;

    ### Enable Mesh and RMM sites
    sudo ln -s /etc/nginx/sites-available/rmm.conf /etc/nginx/sites-enabled/rmm.conf
    sudo ln -s /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-enabled/meshcentral.conf

    ### Create conf directory
    sudo mkdir /etc/conf.d

    ### Create Celery systemd service
    print_green 'Creating Celery service'
    createCeleryService;

    ### Configure Celery service
    print_green 'Creating Celery config'
    createCeleryConf;

    ### Create CeleryBeat systemd service
    print_green 'Creating CeleryBeat service'
    createCeleryBeatService;

    ### Correct conf dir ownership
    sudo chown "${USER}:${USER}" -R /etc/conf.d/

    ### Create MeshCentral systemd service
    print_green 'Creating MeshCentral service'
    createMeshCentralService;

    ### Update services info
    sudo systemctl daemon-reload

    ### Verify and correct permissions
    if [ -d ~/.npm ]; then
        sudo chown -R "${USER}:${GROUP}" ~/.npm
    fi

    if [ -d ~/.config ]; then
        sudo chown -R "${USER}:${GROUP}" ~/.config
    fi

    ### Install frontend
    print_green 'Installing the frontend'
    installFrontEnd "$INSTALL_TYPE" "$FRONTEND_URL";

    ### Set front end Nginx config and enable
    print_green 'Creating Frontend Nginx config'
    createFrontendNginxConf;

    ### Enable Frontend site
    sudo ln -s /etc/nginx/sites-available/frontend.conf /etc/nginx/sites-enabled/frontend.conf

    ### Enable RMM, Daphne, Celery, and Nginx services
    print_green 'Enabling Services'

    for i in rmm.service daphne.service celery.service celerybeat.service nginx
    do
        sudo systemctl enable ${i}
        sudo systemctl stop ${i}
        sudo systemctl start ${i}
    done
    sleep 5

    ### Enable MeshCentral service
    print_green 'Starting meshcentral and waiting for it to install plugins'
    enableMeshService;

    ### Generating MeshCentral key
    print_green 'Generating meshcentral login token key'
    generateMeshToken;

    ### Configuring MeshCentral admin user and device group, restart service
    print_green 'Creating meshcentral account and group'
    configMeshUserGroup;

    ### Enable and configure NATS service
    print_green 'Starting NATS service'
    enableNatsService;

    ### Disable django admin
    sed -i 's/ADMIN_ENABLED = True/ADMIN_ENABLED = False/g' /rmm/api/tacticalrmm/tacticalrmm/local_settings.py

    ### Restart core services
    print_green 'Restarting services'

    for i in rmm.service daphne.service celery.service celerybeat.service
    do
        sudo systemctl stop ${i}
        sudo systemctl start ${i}
    done

    ### Yay, we're done!
    print_yellow "Installation complete!"
    printf >&2 "${YELLOW}Access your rmm at: ${GREEN}https://${frontenddomain}${NC}\n\n"
    printf >&2 "${YELLOW}Django admin url (disabled by default): ${GREEN}https://${rmmdomain}/${ADMINURL}/${NC}\n\n"
    printf >&2 "${YELLOW}MeshCentral username: ${GREEN}${meshusername}${NC}\n"
    printf >&2 "${YELLOW}MeshCentral password: ${GREEN}${MESHPASSWD}${NC}\n\n"

    if [ "$BEHIND_NAT" = true ]; then
        print_yellow "Read below if your router does NOT support Hairpin NAT:"
        print_green "If you will be accessing the web interface of the RMM from the same LAN as this server,\nyou'll need to make sure your 3 subdomains resolve to ${IPV4}"
        print_green "This also applies to any agents that will be on the same local network as the rmm."
        print_green "You'll also need to setup port forwarding in your router on ports 80, 443 and 4222 tcp."
    fi

    print_yellow "Please refer to the github README for next steps."

    return
}

# Update function
updateTRMM()
{
    ### Check if user is same as during installation
    checkSameUser "$INSTALL_TYPE";

    ### Get current release version and check if update is necessary
    checkIfUpdate;

    ### Get current versions of necessary included apps
    checkAdditionalAppsVers;

    ### Clear screen
    cls;

    ### Check CHECK_NATS_LIMITNOFILE, whatever that means
    checkNatsLimitNoFile;

    ### Check Nginx config
    installNginx "updatepart1";

    ### Stop services
    for i in nginx nats-api nats rmm daphne celery celerybeat
    do
        print_green "Stopping ${i} service..."
        sudo systemctl stop "${i}"
    done

    ### Rebuild uwsgi config
    rm -f /rmm/api/tacticalrmm/app.ini
    setUwsgiProcs;
    createUwsgiConf;

    ### Check if Python is up to date, if not, update
    installPython "$INSTALL_TYPE";

    ### Check if NATS is up to date, if not, update
    installNats "$INSTALL_TYPE";

    ### This does stuff
    if [ -d ~/.npm ]; then
        sudo rm -rf ~/.npm
    fi

    if [ -d ~/.cache ]; then
        sudo rm -rf ~/.cache
    fi

    if [ -d ~/.config ]; then
        sudo chown -R "${USER}:${GROUP}" ~/.config
    fi

    ### Check NodeJS version, update if needed and update MeshCentral
    print_green 'Updating NodeJS'
    installNodeJS "$INSTALL_TYPE";

    ### Pull domain info from existing Nginx confs
    rmmdomain=$(grep server_name /etc/nginx/sites-available/rmm.conf | grep -v 301 | head -1 | tr -d " \t" | sed 's/.*server_name//' | tr -d ';')
    frontenddomain=$(grep server_name /etc/nginx/sites-available/frontend.conf | grep -v 301 | head -1 | tr -d " \t" | sed 's/.*server_name//' | tr -d ';')
    meshdomain=$(grep server_name /etc/nginx/sites-available/meshcentral.conf | grep -v 301 | head -1 | tr -d " \t" | sed 's/.*server_name//' | tr -d ';')

    ### Set symlinks to avoid security concerns and simplify Nginx config
    sudo ln -s /etc/letsencrypt/live/${rootdomain}/fullchain.pem /etc/ssl/certs/fullchain.pem
	sudo ln -s /etc/letsencrypt/live/${rootdomain}/privkey.pem /etc/ssl/private/privkey.pem

    ### Update from main repo
    print_green 'Cloning primary repo'
    clonePrimaryRepo "$INSTALL_TYPE" "$REPO_URL" "$BRANCH";

    ### Update from community-scripts repo
    print_green 'Cloning community scripts repo'
    cloneScriptsRepo "$INSTALL_TYPE" "$SCRIPTS_REPO_URL";

    ### Apply updated Ownership and perms
    sudo chown "${USER}:${USER}" -R /rmm
    sudo chown "${USER}:${USER}" -R ${SCRIPTS_DIR}
    sudo chown "${USER}:${USER}" /var/log/celery
    sudo chown "${USER}:${USER}" -R /etc/conf.d/

    ### Check additional Nginx settings and update
    installNginx "updatepart2";

    ### Update Nginx conf files
    createMeshNginxConf;
    createFrontendNginxConf;
    createBackendNginxConf;

    ### Reconfigure backend
    createCeleryConf;
    configureBackend "$INSTALL_TYPE";

    ### Disable Redis append only
    turnOffRedisAppendOnly;

    ### Update Frontend
    installFrontEnd "$INSTALL_TYPE" "$FRONTEND_URL";

    ### Start services
    for i in nats nats-api rmm daphne celery celerybeat nginx
    do
        print_green "Starting ${i} service"
        sudo systemctl start "${i}"
    done
    sleep 1

    ### Push agent updates
    /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py update_agents

    ### Update MeshCentral if necessary
    updateMeshCentral;
    createMeshConfig;
    enableMeshService "$INSTALL_TYPE";

    ### Cleanup
    rm -f $TMP_SETTINGS

    ### Bye-bye
    print_green "Update finished!"

    return
}

# Backup Function
backupTRMM()
{
    ### Pull Postgres info
    POSTGRES_USER=$(grep -w USER /rmm/api/tacticalrmm/tacticalrmm/local_settings.py | sed 's/^.*: //' | sed 's/.//' | sed -r 's/.{2}$//')
    POSTGRES_PW=$(grep -w PASSWORD /rmm/api/tacticalrmm/tacticalrmm/local_settings.py | sed 's/^.*: //' | sed 's/.//' | sed -r 's/.{2}$//')

    ### Check if rmmbackup folder exists, if not create it
    if [ ! -d /rmmbackups ]; then
        sudo mkdir /rmmbackups
        sudo chown "${USER}:${USER}" /rmmbackups
    fi

    ### Remove old MeshCentral backups
    if [ -d /meshcentral/meshcentral-backup ]; then
        rm -rf /meshcentral/meshcentral-backup/*
    fi

    ### Remove old MeshCentral DB backups
    if [ -d /meshcentral/meshcentral-coredumps ]; then
        rm -f /meshcentral/meshcentral-coredumps/*
    fi

    ### Set info for backup and folders
    dt_now=$(date '+%Y_%m_%d__%H_%M_%S')
    tmp_dir=$(mktemp -d -t tacticalrmm-XXXXXXXXXXXXXXXXXXXXX)
    sysd="/etc/systemd/system"

    ### Create temp backup subdirectories
    mkdir -p ${tmp_dir}/meshcentral/mongo
    mkdir ${tmp_dir}/postgres
    mkdir ${tmp_dir}/certs
    mkdir ${tmp_dir}/nginx
    mkdir ${tmp_dir}/systemd
    mkdir ${tmp_dir}/rmm
    mkdir ${tmp_dir}/confd

    ### Dump Postgres database
    pg_dump --dbname=postgresql://"${POSTGRES_USER}":"${POSTGRES_PW}"@127.0.0.1:5432/tacticalrmm | gzip -9 > ${tmp_dir}/postgres/db-${dt_now}.psql.gz

    ### Backup Mesh stuff
    tar -czvf ${tmp_dir}/meshcentral/mesh.tar.gz --exclude=/meshcentral/node_modules /meshcentral
    mongodump --gzip --out=${tmp_dir}/meshcentral/mongo

    ### Backup certs
    sudo tar -czvf ${tmp_dir}/certs/etc-letsencrypt.tar.gz -C /etc/letsencrypt .

    ### Backup Nginx configs
    sudo tar -czvf ${tmp_dir}/nginx/etc-nginx.tar.gz -C /etc/nginx .

    ### Backup other config files
    sudo tar -czvf ${tmp_dir}/confd/etc-confd.tar.gz -C /etc/conf.d .

    ### Copy service files
    sudo cp ${sysd}/rmm.service ${sysd}/celery.service ${sysd}/celerybeat.service ${sysd}/meshcentral.service ${sysd}/nats.service ${sysd}/daphne.service ${tmp_dir}/systemd/
    if [ -f "${sysd}/nats-api.service" ]; then
        sudo cp ${sysd}/nats-api.service ${tmp_dir}/systemd/
    fi

    cat /rmm/api/tacticalrmm/tacticalrmm/private/log/django_debug.log | gzip -9 > ${tmp_dir}/rmm/debug.log.gz
    cp /rmm/api/tacticalrmm/tacticalrmm/local_settings.py ${tmp_dir}/rmm/

    tar -cf /rmmbackups/rmm-backup-${dt_now}.tar -C ${tmp_dir} .

    ### Remove temp files/folders
    rm -rf ${tmp_dir}

    print_green "Backup saved to /rmmbackups/rmm-backup-${dt_now}.tar"

    return
}

# Restore T-RMM
restoreTRMM()
{
    ### Repo info for Postegres and Mongo
    setInstallRepos;

    ### Get backup file location
    getBackupFileLocation;

    ### Extract backup
    extractBackup "$backuppath";

    ### Check if original user
    checkSameUser "$INSTALL_TYPE";

    ### Install NodeJS
    print_green 'Installing NodeJS'
    installNodeJS;

    ### Install Nginx and restore Nginx configuration
    print_green 'Installing Nginx and restoring configuration'
    installNginx "$INSTALL_TYPE";

    ### Restore hosts config
    configHosts;

    ### Restore Certbot
    print_green 'Installing Certbot'
    installCertbot "$INSTALL_TYPE";

    ### Restoring existing certs
    print_green 'Restoring certs'

    sudo rm -rf /etc/letsencrypt
    sudo mkdir /etc/letsencrypt
    sudo tar -xzf $tmp_dir/certs/etc-letsencrypt.tar.gz -C /etc/letsencrypt
    
    ### Set symlinks to avoid security concerns and simplify Nginx config
    sudo ln -s /etc/letsencrypt/live/${rootdomain}/fullchain.pem /etc/ssl/certs/fullchain.pem
	sudo ln -s /etc/letsencrypt/live/${rootdomain}/privkey.pem /etc/ssl/private/privkey.pem

    ### Recreate Nginx conf files
    createMeshNginxConf;
    createFrontendNginxConf;
    createBackendNginxConf;

    ### Restore Celery configs
    print_green 'Restoring celery configs'

    sudo mkdir /etc/conf.d
    sudo tar -xzf $tmp_dir/confd/etc-confd.tar.gz -C /etc/conf.d
    sudo chown "${USER}:${USER}" -R /etc/conf.d

    ### Restoring services
    print_green 'Restoring systemd services'

    sudo cp $tmp_dir/systemd/* /etc/systemd/system/
    sudo systemctl daemon-reload

    ### Install Python
    print_green "Installing Python ${PYTHON_VER}"
    installPython;

    ### Installing Redis
    print_green 'Installing redis'
    installRedis;

    ### Install and enable Postgresql
    print_green 'Installing postgresql'
    installPostgresql;

    ### Install and enable MongoDB
    print_green 'Installing MongoDB'
    installMongo;

    ### Restore Mongo database
    print_green 'Restoring MongoDB'
    mongorestore --gzip $tmp_dir/meshcentral/mongo

    ### Clone main repo
    print_green 'Cloning primary repo'
    clonePrimaryRepo "$INSTALL_TYPE" "$REPO_URL" "$BRANCH";

    ### Clone scripts repo
    print_green 'Cloning community scripts repo'
    cloneScriptsRepo "$INSTALL_TYPE" "$SCRIPTS_REPO_URL";

    ### Installing NATS
    print_green 'Installing NATS'
    installNats "$INSTALL_TYPE";

    ### Restore MeshCentral
    print_green 'Restoring MeshCentral'
    installMeshCentral "$INSTALL_TYPE";

    ### Restore UWSGI
    print_green 'Optimizing UWSGI for number of processors'
    setUwsgiProcs;
    print_green 'Creating UWSGI configuration'
    createUwsgiConf;

    ### Restoring other misc stuff
    cp $tmp_dir/rmm/local_settings.py /rmm/api/tacticalrmm/tacticalrmm/
    cp $tmp_dir/rmm/env /rmm/web/.env
    gzip -d $tmp_dir/rmm/debug.log.gz
    cp $tmp_dir/rmm/django_debug.log /rmm/api/tacticalrmm/tacticalrmm/private/log/

    ### Install NATS-API
    print_green 'Installing NATS API'
    installNatsApi;

    ### Restore Postgres database
    print_green 'Restoring the Postgres database'

    pgusername="$(grep -w USER /rmm/api/tacticalrmm/tacticalrmm/local_settings.py | sed 's/^.*: //' | sed 's/.//' | sed -r 's/.{2}$//')"
    pgpw="$(grep -w PASSWORD /rmm/api/tacticalrmm/tacticalrmm/local_settings.py | sed 's/^.*: //' | sed 's/.//' | sed -r 's/.{2}$//')"
    
    sudo -u postgres psql -c "DROP DATABASE IF EXISTS tacticalrmm"
    createPGDB;

    gzip -d $tmp_dir/postgres/*.psql.gz
    PGPASSWORD="${pgpw} psql -h localhost -U ${pgusername} -d tacticalrmm -f $tmp_dir/postgres/db*.psql"

    ### Restore Backend
    print_green 'Restoring the backend'
    configureBackend "$INSTALL_TYPE";

    ### Start NATS
    print_green 'Start NATS'
    sudo systemctl enable nats.service
    sudo systemctl start nats.service

    ### Install frontend
    print_green 'Installing the frontend'
    installFrontEnd;

    # reset perms
    sudo chown "${USER}:${USER}" -R /rmm
    sudo chown "${USER}:${USER}" /var/log/celery
    sudo chown "${USER}:${USER}" -R /etc/conf.d/
    sudo chown -R "${USER}:${GROUP}" /home/"${USER}"/.npm
    sudo chown -R "${USER}:${GROUP}" /home/"${USER}"/.config
    sudo chown -R "${USER}:${GROUP}" /home/"${USER}"/.cache

    ### Update services info
    sudo systemctl daemon-reload

    ### Enable RMM, Daphne, Celery, Nats-api, and Nginx services
    print_green 'Enabling Services'

    for i in celery.service celerybeat.service rmm.service daphne.service nats-api.service nginx
    do
        sudo systemctl enable ${i}
        sudo systemctl stop ${i}
        sudo systemctl start ${i}
    done
    sleep 5

    ### Start MeshCentral
    print_green 'Starting meshcentral'
    sudo systemctl enable meshcentral
    sudo systemctl start meshcentral

    ### Done!!!!
    print_green 'Restore complete!'

    return
}

# Troubleshooting utility
troubleShoot()
{
    ### Resolve Locally used DNS server
    locdns=$(resolvectl | grep 'Current DNS Server:' | cut -d: -f2 | awk '{ print $1}')

    ### Prompt for host, domain, and email info
    getHostAndDomainInfo;

    ### Verify domains are live
    pingDomain "$rmmdomain";
    pingDomain "$frontenddomain";
    pingDomain "$meshdomain";

    ### Verify IPs
    echo -e "${GREEN} Checking IPs${NC}" | tee -a checklog.log
    printf >&2 "\n\n"
    checkIPisLive "$rmmdomain";
    remapiip="${reminputip}"
    checkIPisLive "$frontenddomain";
    checkIPisLive "$meshdomain";

    ### Get services status
    readServicesStatus;

    ### Verify services active
    checkIfServiceActive "$rmmstatus" "RMM Service";
    checkIfServiceActive "$daphnestatus" "Daphne Service";
    checkIfServiceActive "$celerystatus" "Celery Service";
    checkIfServiceActive "$celerybeatstatus" "CeleryBeat Service";
    checkIfServiceActive "$nginxstatus" "Nginx Service";
    checkIfServiceActive "$natsstatus" "NATS Service";
    checkIfServiceActive "$natsapistatus" "NATS-API Service";
    checkIfServiceActive "$meshcentralstatus" "MeshCentral Service";
    checkIfServiceActive "$mongodstatus" "MongoD Service";
    checkIfServiceActive "$postgresqlstatus" "Postgresql Service";
    checkIfServiceActive "$redisserverstatus" "Redis-Server Service";

    ### Get WAN IP
    wanip=$(dig @resolver4.opendns.com myip.opendns.com +short)
    echo -e "${GREEN} WAN IP is $wanip.${NC}" | tee -a checklog.log
    printf >&2 "\n\n"

    ### Check if ports are open
    isPortOpen "4222" "NATS";
    isPortOpen "80" "HTTP";
    isPortOpen "443" "HTTPS";
    
    ### Checking Proxy
    checkProxy;

    ### Check for valid cert
    checkIfCertIsValid;

    ### Generate log summary
    echo -e "${GREEN} Getting summary output of logs.${NC}" | tee -a checklog.log
    printf >&2 "\n\n"

    tail /rmm/api/tacticalrmm/tacticalrmm/private/log/django_debug.log  | tee -a checklog.log
	printf >&2 "\n\n"
    tail /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log  | tee -a checklog.log
	printf >&2 "\n\n"

    print_yellow "You will have a log file called checklog.log in the directory you ran this script from."

    return
}
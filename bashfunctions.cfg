########################
#  Input verification  #
########################

# Translate user input to all lower case to prevent ID10T errors
translateToLowerCase()
{
	local lowercase=""
	lowercase="$(echo $1 | tr '[:upper:]' '[:lower:]')"
	echo "$lowercase"
}


####################
#  Misc Functions  #
####################

# Set output colors
setColors()
{
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    RED='\033[0;31m'
    NC='\033[0m'
}


# Gather OS info
getOSInfo()
{
    osname=$(lsb_release -si); osname=${osname^}
    osname=$(echo "$osname" | tr  '[A-Z]' '[a-z]')
    fullrel=$(lsb_release -sd)
    codename=$(lsb_release -sc)
    relno=$(lsb_release -sr | cut -d. -f1)
    fullrelno=$(lsb_release -sr)
}

# Check for new script version
checkScriptVer()
{
    TMP_FILE=$(mktemp -p "" "rmminstall_XXXXXXXXXX")
    curl -s -L "${SCRIPT_URL}" > ${TMP_FILE}
    NEW_VER=$(grep "^SCRIPT_VERSION" "$TMP_FILE" | awk -F'[="]' '{print $3}')

    if [ "${SCRIPT_VERSION}" -ne "${NEW_VER}" ]; then
        printf >&2 "${YELLOW}Old install script detected, downloading and replacing with the latest version...${NC}\n"
        wget -q "${SCRIPT_URL}" -O install.sh
        printf >&2 "${YELLOW}Script updated! Please re-run ./install.sh${NC}\n"
        rm -f $TMP_FILE
        exit 1
    fi

    rm -f $TMP_FILE
}




#######################
#  Install Functions  #
#######################

# Install script prereqs
installPreReqs()
{
    sudo apt update && sudo apt install -y curl wget dirmngr gnupg lsb-release
}

# Install remaining prereqs
installAdditionalPreReqs()
{
    sudo apt install -y software-properties-common openssl ca-certificates apt-transport-https gcc g++ make build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev libbz2-dev git
}


###################
#  CFG file info  #
###################

CFG_VERSION="8"


###########################
#  Certificate Functions  #
###########################


# Check that acme challenge dns entry exists
acmeChallengeCheck()
{
    local acmegood="n"

    until [ "$acmegood" == "y" ]; do
        if [[ $(dig +noall +answer -t TXT _acme-challenge.$1) ]] 2>/dev/null; then
            acmegood="y"
            echo -e "${GREEN} Acme Challenge TXT record available.${NC}\n" | tee -a "${currentlog}"
            echo -e "${GREEN} Continuing...${NC}" | tee -a "${currentlog}"
        else
            echo -e "${YELLOW} Acme Challenge TXT record not available yet.${NC}\n" | tee -a "${currentlog}"
            echo -e "${YELLOW} Trying again in 30 sec...${NC}\n" | tee -a "${currentlog}"
            acmegood="n"
            sleep 30
        fi
    done
}

# Import certs
importCerts()
{
    dialog --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Importing Certificates" --msgbox "A VIM window will open for you to paste the contents of your SSL certificate, private key, and CA Chain file, in that order.\n\nTo paste the contents, type i , then shift+insert.\n\nAfter pasting the contents, type esc , then shift-: , then wq , then enter to close the window and continue.\n\nPress enter when you're ready to begin:" 0 0
    if [ ! -d "/etc/letsencrypt/live/${rootdomain}" ]; then
        sudo mkdir -p /etc/letsencrypt/live/${rootdomain} 2>&1 | tee -a "${currentlog}"
    fi

    if [ -f /etc/letsencrypt/live/${rootdomain}/fullchain.pem ]; then
        sudo truncate -s 0 /etc/letsencrypt/live/${rootdomain}/fullchain.pem 2>&1 | tee -a "${currentlog}"
    fi
    sudo vim /etc/letsencrypt/live/${rootdomain}/fullchain.pem 2>&1 | tee -a "${currentlog}"

    if [ -f /etc/letsencrypt/live/${rootdomain}/privkey.pem ]; then
        sudo truncate -s 0 /etc/letsencrypt/live/${rootdomain}/privkey.pem 2>&1 | tee -a "${currentlog}"
    fi
    sudo vim /etc/letsencrypt/live/${rootdomain}/privkey.pem 2>&1 | tee -a "${currentlog}"

    if [ -f /etc/letsencrypt/live/${rootdomain}/chain.pem ]; then
        sudo truncate -s 0 /etc/letsencrypt/live/${rootdomain}/chain.pem 2>&1 | tee -a "${currentlog}"
    fi
    sudo vim /etc/letsencrypt/live/${rootdomain}/chain.pem 2>&1 | tee -a "${currentlog}"
    
    sudo chown root:${USER} -R /etc/letsencrypt 2>&1 | tee -a "${currentlog}"
    sudo chmod 755 -R /etc/letsencrypt 2>&1 | tee -a "${currentlog}"
}

# Generate certs
generateCerts()
{
    # Manual DNS method
    if [ "$certtype" == "dns" ]; then
        echo -e "${GREEN} Getting wildcard certificate...${NC}" | tee -a "${currentlog}"
    
        # Get initial DNS text entry
        sudo certbot certonly --manual -d *.${rootdomain} --agree-tos --no-bootstrap --preferred-challenges dns -m ${letsemail} --no-eff-email 2>&1 | tee -a "${currentlog}"
    
        # Ensure TXT record has populated
        acmeChallengeCheck "$rootdomain";
    
        # Keep going until successful cert issue after adding DNS txt entry
        while [[ $? -ne 0 ]]; do
            sudo certbot certonly --manual -d *.${rootdomain} --agree-tos --no-bootstrap --preferred-challenges dns -m ${letsemail} --no-eff-email 2>&1 | tee -a "${currentlog}"
        done

        sudo chown root:${USER} -R /etc/letsencrypt 2>&1 | tee -a "${currentlog}"
        sudo chmod 755 -R /etc/letsencrypt 2>&1 | tee -a "${currentlog}"

    # Webroot method
    elif [ "$certtype" == "webroot" ]; then
        echo -e "${GREEN} Getting webroot certificates...${NC}" | tee -a "${currentlog}"

        # Edit nginx conf files
        sudo sed -i "s/\#location/location/" /etc/nginx/sites-available/frontend.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/\#root/root/" /etc/nginx/sites-available/frontend.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/\#\}/\}/" /etc/nginx/sites-available/frontend.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/ssl_stapling/\#ssl_stapling/" /etc/nginx/sites-available/frontend.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/\#location/location/" /etc/nginx/sites-available/rmm.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/\#root/root/" /etc/nginx/sites-available/rmm.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/\#\}/\}/" /etc/nginx/sites-available/rmm.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/ssl_stapling/\#ssl_stapling/" /etc/nginx/sites-available/rmm.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/\#location/location/" /etc/nginx/sites-available/meshcentral.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/\#root/root/" /etc/nginx/sites-available/meshcentral.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/\#\}/\}/" /etc/nginx/sites-available/meshcentral.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/ssl_stapling/\#ssl_stapling/" /etc/nginx/sites-available/meshcentral.conf 2>&1 | tee -a "${currentlog}"

        # Create folder
        sudo mkdir -p /var/www/letsencrypt 2>&1 | tee -a "${currentlog}"

        # Start nginx
        sudo systemctl start nginx 2>&1 | tee -a "${currentlog}"

        # Get webroot certs
        sudo certbot certonly --webroot --webroot-path /var/www/letsencrypt/ --agree-tos -m ${letsemail} --no-eff-email -d ${rmmdomain} -d ${frontenddomain} -d ${meshdomain} 2>&1 | tee -a "${currentlog}"

        # Stop nginx
        sudo systemctl stop nginx 2>&1 | tee -a "${currentlog}"

        # Switch from snakeoil to webroot
        sudo sed -i "s/ssl\/certs\/ssl-cert-snakeoil.pem/letsencrypt\/live\/${rootdomain}\/fullchain.pem/" /etc/nginx/sites-available/rmm.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/ssl\/private\/ssl-cert-snakeoil.key/letsencrypt\/live\/${rootdomain}\/privkey.pem/" /etc/nginx/sites-available/rmm.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/\#ssl_stapling/ssl_stapling/" /etc/nginx/sites-available/rmm.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/ssl\/certs\/ssl-cert-snakeoil.pem/letsencrypt\/live\/${rootdomain}\/fullchain.pem/" /etc/nginx/sites-available/frontend.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/ssl\/private\/ssl-cert-snakeoil.key/letsencrypt\/live\/${rootdomain}\/privkey.pem/" /etc/nginx/sites-available/frontend.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/\#ssl_stapling/ssl_stapling/" /etc/nginx/sites-available/frontend.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/ssl\/certs\/ssl-cert-snakeoil.pem/letsencrypt\/live\/${rootdomain}\/fullchain.pem/" /etc/nginx/sites-available/meshcentral.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/ssl\/private\/ssl-cert-snakeoil.key/letsencrypt\/live\/${rootdomain}\/privkey.pem/" /etc/nginx/sites-available/meshcentral.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/\#ssl_stapling/ssl_stapling/" /etc/nginx/sites-available/meshcentral.conf 2>&1 | tee -a "${currentlog}"

        # Create dns type folder if it doesn't exist
        if [ ! -d "/etc/letsencrypt/live/${rootdomain}" ]; then
            sudo mkdir -p /etc/letsencrypt/live/${rootdomain} 2>&1 | tee -a "${currentlog}"
        fi
        
        # Create symlinks so cert paths don't need to be edited
        sudo ln -s /etc/letsencrypt/live/${rmmdomain}/fullchain.pem /etc/letsencrypt/live/${rootdomain}/fullchain.pem 2>&1 | tee -a "${currentlog}"
        sudo ln -s /etc/letsencrypt/live/${rmmdomain}/privkey.pem /etc/letsencrypt/live/${rootdomain}/privkey.pem 2>&1 | tee -a "${currentlog}"
        sudo ln -s /etc/letsencrypt/live/${rmmdomain}/chain.pem /etc/letsencrypt/live/${rootdomain}/chain.pem 2>&1 | tee -a "${currentlog}"

        sudo echo '#!/usr/bin/env bash' | sudo tee /etc/letsencrypt/renewal-hooks/post/001-restart-services.sh
        sudo sed -i "/\#\!\/usr\/bin\/env bash/ a systemctl restart nginx meshcentral rmm celery celerybeat nats" /etc/letsencrypt/renewal-hooks/post/001-restart-services.sh 2>&1 | tee -a "${currentlog}"
        sudo chmod +x /etc/letsencrypt/renewal-hooks/post/001-restart-services.sh 2>&1 | tee -a "${currentlog}"
    
        sudo chown root:${USER} -R /etc/letsencrypt 2>&1 | tee -a "${currentlog}"
        sudo chmod 755 -R /etc/letsencrypt 2>&1 | tee -a "${currentlog}"
        sudo systemctl start nginx 2>&1 | tee -a "${currentlog}"
    fi
}

# Renew Certs
renewCerts()
{
    # generate certs and restart services
    certtype="dns"

    # UserInput
    getEmailAddress;
    
    # MiscFunctions
    getExistingDomainInfo;
    
    generateCerts;
    
    sudo systemctl restart nginx.service rmm.service celery celerybeat.service nats-api.service nats.service meshcentral.service 2>&1 | tee -a "${currentlog}"
}

# Select DNS or Webroot
dnsOrWebroot()
{
    dialog --cr-wrap --clear --yes-label "Manual-DNS" --no-label "Webroot" --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Certificate Generation" --yesno "LetsEncrypt Manual-DNS method, or Webroot method?\n\nWebroot requires port 80 to be open publicly but allows auto-renewal.\n\nManual-DNS requires manual renewal, but can be used on internal only servers." 0 0
    case $? in
        # Manual-DNS certs
        0 ) certtype="dns"
            generateCerts;;
        
        # Webroot certs
        1 ) certtype="webroot";;
    esac
}

# Install Certbot and get initial certs
installCertbot()
{
    # Install Certbot
    sudo apt-get install -y certbot 2>&1 | tee -a "${currentlog}"
    if [ "$1" == "restore" ]; then
        # Generate DH if it doesn't exist
        if [ ! -f /etc/ssl/certs/dhparam.pem ]; then
            sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 2>&1 | tee -a "${currentlog}"
        fi
        return
    fi

    if [ "$1" == "devinstall" ]; then
        echo -e "${GREEN} Certificates should be in place.${NC}\n" | tee -a "${currentlog}"
    elif [ "$autoinstall" != "1" ]; then
        dialog --cr-wrap --clear --yes-label "LetsEncrypt" --no-label "Import" --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Certificate Generation" --yesno "Would you like to have certificates generated using LetsEncrypt, or import your own existing certificates?" 0 0
        case $? in
            # Get LetsEncrypt type
            0 ) dnsOrWebroot;;

            # Import certs using vim
            1 ) importCerts;;
        esac
    elif [ "$autoinstall" == "1" ]; then
        if [ "$certtype" == "import" ]; then
            if [ ! -d "/etc/letsencrypt/live/${rootdomain}" ]; then
                sudo mkdir -p /etc/letsencrypt/live/${rootdomain} 2>&1 | tee -a "${currentlog}"
            fi
            echo -e "${GREEN} Importing certificates.${NC}" | tee -a "${currentlog}"
            sudo cp "$sslcert" /etc/letsencrypt/live/${rootdomain}/fullchain.pem 2>&1 | tee -a "${currentlog}"
            sudo cp "$sslkey" /etc/letsencrypt/live/${rootdomain}/privkey.pem 2>&1 | tee -a "${currentlog}"
            sudo cp "$sslcacert" /etc/letsencrypt/live/${rootdomain}/chain.pem 2>&1 | tee -a "${currentlog}"
            sudo chown root:${USER} -R /etc/letsencrypt 2>&1 | tee -a "${currentlog}"
            sudo chmod 755 -R /etc/letsencrypt 2>&1 | tee -a "${currentlog}"
        elif [ "$certtype" == "webroot" ]; then
            return
        fi
    fi

    # Generate DH if it doesn't exist
    if [ ! -f /etc/ssl/certs/dhparam.pem ]; then
        sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 2>&1 | tee -a "${currentlog}"
    fi
}
###################
#  CFG file info  #
###################

CFG_VERSION="8"


######################################################################################
#  Misc Functions, must be before any functions except input verification functions  #
######################################################################################

# Set bash text colors
setColors()
{
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    RED='\033[0;31m'
    NC='\033[0m'
}

# Clear screen
cls()
{
    printf "\033c"
}

# Purdy install text
print_green()
{
    printf >&2 "${GREEN}%0.s-${NC}" {1..80}
    printf >&2 "\n"
    printf >&2 "${GREEN}${1}${NC}\n"
    printf >&2 "${GREEN}%0.s-${NC}" {1..80}
    printf >&2 "\n"
}

# Check for new script version
checkScriptVer()
{
    TMP_FILE=$(mktemp -p "" "rmminstall_XXXXXXXXXX")
    curl -s -L "$2" > ${TMP_FILE}
    NEW_VER=$(grep "^SCRIPT_VERSION" "$TMP_FILE" | awk -F'[="]' '{print $3}')

    if [ "$1" -ne "${NEW_VER}" ]; then
        wget -q "$2" -O "$3"
        dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "Old $3 detected.\nThe latest version has been downloaded.\n\nPlease re-run .$3" 10 40
        rm -f $TMP_FILE
        clear -x
        exit 1
    fi

    rm -f $TMP_FILE
}

# Check for functions updates
checkCfgVer()
{
    TMP_FILE=$(mktemp -p "" "rmminstall_XXXXXXXXXX")
    curl -s -L "$1/script-cfg/$2" > ${TMP_FILE}
    NEW_VER=$(grep "^CFG_VERSION" "$TMP_FILE" | awk -F'[="]' '{print $3}')

    if [ "$CFG_VERSION" -ne "${NEW_VER}" ]; then
        wget -q "$1/script-cfg/$2" -O "$PWD/script-cfg/$2"
        dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "Old $2 file detected.\nThe latest version has been downloaded.\n\nPlease re-run .$3" 10 40
        rm -f $TMP_FILE
        clear -x
        exit 1
    fi

    rm -f $TMP_FILE
}

# Check for root as user
checkRoot()
{
    if [ $EUID -eq 0 ]; then
        dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "Do NOT run this script as root. Exiting." 0 0
        clear -x
        exit 1
    fi
}

# Check if Tactical user exists, if not prompt to create it
checkTacticalUser()
{
    local tacticaluser=""
    local hassudo=""
    if [ -d /rmm ]; then
        tacticaluser=$(stat -c '%U' /rmm)
        if [ "$tacticaluser" != "${USER}" ]; then
            dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "This script must be run as the Tactical user.\nPlease switch users, and try again.\n\nExiting." 0 0
        else
            return
        fi
    elif [ "${USER}" != "tactical" ]; then
        tacticaluser="$(id -u tactical > /dev/null 2>&1; echo $?)"
        case $tacticaluser in
            0 ) dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "This script must be run as the Tactical user.\nPlease switch users, and try again.\n\nExiting." 0 0
                clear -x
                exit 1;;

            1 ) print_green 'Tactical user does not exist. Creating now.'
                sudo useradd -m tactical
                sudo usermod -a -G sudo tactical
                sudo passwd tactical
                dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Tactical User Created" --msgbox "The Tactical user has been created.\nPlease switch users, re-download the script, and try again.\n\nExiting." 0 0
                clear -x
                exit 1;;
        esac
    elif [ "${USER}" == "tactical" ]; then
        hassudo="$(id -nG tactical | grep -w 'sudo' > /dev/null 2>&1; echo $?)"
        case $hassudo in
            0 ) return;;

            1 ) print_green 'Adding Tactical user to sudo group.'
                sudo usermod -a -G sudo tactical
                dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Tactical User Sudo Privileges Added" --msgbox "The Tactical user has been added to the sudo group.\nPlease log out of the tactical user, log back in, and try again.\n\nExiting." 0 0
                clear -x
                exit 1;;
        esac    
    fi
}       

# Clone primary repo
clonePrimaryRepo()
{
    if [ "$1" == "install" ]; then
        sudo mkdir /rmm
        sudo chown "${USER}:${USER}" /rmm
        sudo mkdir -p /var/log/celery
        sudo chown "${USER}:${USER}" /var/log/celery
        git clone "$2" /rmm/
    fi
    cd /rmm
    git config user.email "admin@example.com"
    git config user.name "Bob"
    if [ "$1" == "install" ]; then
        git checkout "$3"
    elif [ "$1" == "update" ]; then
        git fetch
        git checkout "$3"
        git reset --hard FETCH_HEAD
        git clean -df
        git pull
    fi
}

# Clone scripts repo
cloneScriptsRepo()
{
    if [ ! -d "${SCRIPTS_DIR}" ]; then
        sudo mkdir -p "${SCRIPTS_DIR}"
        sudo chown "${USER}:${USER}" "${SCRIPTS_DIR}"
        git clone "$2" "${SCRIPTS_DIR}"/
    fi    
    cd "${SCRIPTS_DIR}"
    git config user.email "admin@example.com"
    git config user.name "Bob"
    if [ "$1" == "install" ]; then
        git checkout main
    elif [ "$1" == "update" ]; then
        git fetch
        git checkout main
        git reset --hard FETCH_HEAD
        git clean -df
        git pull
    fi
}

# Set primary repos to use
decideMainRepos()
{
    userconfirm="n"
    local own=""
    local bran=""
    
    until [ "$userconfirm" == "y" ]; do
        own=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Select Repository" --inputbox "Enter the dev repo owner name.\nThis is right after github.com in the URL:" 10 90 3>&1 1>&2 2>&3)
        own="$(translateToLowerCase $own)"
        dialog --cr-wrap --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Select Repository" --yesno "Is this correct?\n$own" 0 0
        case $? in
            0 ) userconfirm="y"
                clear -x;;
            1 ) userconfirm="n"
                derpDerp;;
        esac
    done
    userconfirm="n"
    REPO_OWNER="$own"

    until [ "$userconfirm" == "y" ]; do
        bran=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Select Repository Branch" --inputbox "Enter the dev repo branch name.\nThis is right after tacticalrmm in the URL:" 10 90 3>&1 1>&2 2>&3)
        bran="$(translateToLowerCase $bran)"
        dialog --cr-wrap --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Select Repository Branch" --yesno "Is this correct?\n$bran" 0 0
        case $? in
            0 ) userconfirm="y"
                clear -x;;
            1 ) userconfirm="n"
                derpDerp;;
        esac
    done
    userconfirm="n"
    BRANCH="$bran"

    ### Check for new functions versions, include url, filename, and script name as variables
    for i in "${cfgfiles[@]}"
    do
	    checkCfgVer "$CFG_URL" "$i" "$THIS_SCRIPT";		# MiscFunctions
    done
    ### Check for new script version, pass script version, url, and script name variables in that order
    checkScriptVer "$SCRIPT_VERSION" "$SCRIPT_URL" "$THIS_SCRIPT";
}
###################
#  CFG file info  #
###################

CFG_VERSION="8"


#######################
#  Install Functions  #
#######################

# Install script prereqs
installPreReqs()
{
    sudo apt update && sudo apt install -y curl vim wget dirmngr gnupg lsb-release ncurses-base ncurses-bin ncurses-doc ncurses-examples ncurses-term dialog libncurses5 libncursesw5 libncurses5-dev libncursesw5-dev
}

# Install remaining prereqs
installAdditionalPreReqs()
{
    sudo apt install -y software-properties-common dnsutils openssl ca-certificates apt-transport-https gcc g++ make build-essential zlib1g-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev libbz2-dev git
}

# Configure repos for stuff
setInstallRepos()
{
    # There is no Jammy repo yet so use Focal for Ubuntu 22.04
    if ([ "$osname" == "ubuntu" ] && [ "$fullrelno" == "20.04" ]); then
        mongodb_repo="deb [arch=amd64] https://repo.mongodb.org/apt/$osname $codename/mongodb-org/4.4 multiverse"
    elif ([ "$osname" == "ubuntu" ] && [ "$fullrelno" == "22.04" ]); then
        codename="focal"
        mongodb_repo="deb [arch=amd64] https://repo.mongodb.org/apt/$osname $codename/mongodb-org/4.4 multiverse"
    # There is no bullseye repo yet for mongo so just use Buster on Debian 11
    elif ([ "$osname" == "debian" ] && [ $relno -eq 10 ]); then
        mongodb_repo="deb [arch=amd64] https://repo.mongodb.org/apt/$osname $codename/mongodb-org/4.4 main"
    else
        codename="buster"
        mongodb_repo="deb [arch=amd64] https://repo.mongodb.org/apt/$osname $codename/mongodb-org/4.4 main"
    fi

    postgresql_repo="deb [arch=amd64] https://apt.postgresql.org/pub/repos/apt/ $codename-pgdg main"
}

# Install MongoDB
installMongo()
{
    wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/mongo.gpg > /dev/null
    echo "$mongodb_repo" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
    sudo apt update && sudo apt install -y mongodb-org
    sudo systemctl enable mongod
    sudo systemctl restart mongod
    sleep 5
}

# Install NodeJS
installNodeJS()
{
    if [ "$1" == "update" ]; then
        HAS_NODE16=$(node --version | grep v16)
        if ! [ $HAS_NODE16 ]; then
            echo -e "${GREEN} Updating NodeJS to v16${NC}\n"
            rm -rf /rmm/web/node_modules
            sudo systemctl stop meshcentral
            sudo apt remove -y nodejs
            sudo rm -rf /usr/lib/node_modules
        fi
    fi
    curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -
    sudo apt update && sudo apt install -y nodejs
    sudo npm install -g npm
    if [ "$1" == "update" ]; then
        sudo chown "${USER}:${USER}" -R /meshcentral
        cd /meshcentral
        rm -rf node_modules/
        npm install meshcentral@"${LATEST_MESH_VER}"
        sudo systemctl start meshcentral
    fi
}

# Install Redis
installRedis()
{
    sudo apt install -y redis
}

# Install Python
installPython()
{
    if [ "$1" == "update" ]; then
        HAS_PY310=$(python3.10 --version | grep ${PYTHON_VER})
        if ! [ $HAS_PY310 ]; then
            echo -e "${GREEN} Updating to ${PYTHON_VER}${NC}\n"
        fi
    fi

    if [ "$1" == "devinstall" ]; then
        echo -e "${GREEN} Python already installed${NC}\n"
    else
        numprocs=$(nproc)
        cd ~
        wget https://www.python.org/ftp/python/${PYTHON_VER}/Python-${PYTHON_VER}.tgz
        tar -xf Python-${PYTHON_VER}.tgz
        cd Python-${PYTHON_VER}
        ./configure --enable-optimizations
        make -j $numprocs
        sudo make altinstall
        cd ~
        sudo rm -rf Python-${PYTHON_VER} Python-${PYTHON_VER}.tgz
        if [ "$1" == "devprep" ]; then
            # Misc functions
            print_green 'All Prereqs installed';
            exit
        fi
    fi
}

# Install Postgresql
installPostgresql()
{
    echo "$postgresql_repo" | sudo tee /etc/apt/sources.list.d/pgdg.list
    wget -qO - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/postgresql.gpg > /dev/null
    sudo apt update && sudo apt install -y postgresql-14
    sleep 2
    sudo systemctl enable postgresql
    sudo systemctl restart postgresql
    sleep 5
}

# Install NATS
installNats()
{
    if [ "$1" == "update" ]; then
        HAS_LATEST_NATS=$(/usr/local/bin/nats-server -version | grep "${NATS_SERVER_VER}")
        if ! [ $HAS_LATEST_NATS ]; then
            echo -e "${GREEN} Updating nats to v${NATS_SERVER_VER}${NC}\n"
        fi
    fi
    if [ "$1" == "install" ] || [ "$1" == "devinstall" ] || [ "$1" == "restore" ]; then
        NATS_SERVER_VER=$(grep "^NATS_SERVER_VER" "$SETTINGS_FILE" | awk -F'[= "]' '{print $5}')
    fi
    nats_tmp=$(mktemp -d -t nats-XXXXXXXXXX)
    wget -q https://github.com/nats-io/nats-server/releases/download/v${NATS_SERVER_VER}/nats-server-v${NATS_SERVER_VER}-linux-amd64.tar.gz -P ${nats_tmp}
    tar -xzf ${nats_tmp}/nats-server-v${NATS_SERVER_VER}-linux-amd64.tar.gz -C ${nats_tmp}
    if [ "$1" == "update" ]; then
        sudo rm -f /usr/local/bin/nats-server
    fi
    sudo mv ${nats_tmp}/nats-server-v${NATS_SERVER_VER}-linux-amd64/nats-server /usr/local/bin/
    sudo chmod +x /usr/local/bin/nats-server
    sudo chown "${USER}:${USER}" /usr/local/bin/nats-server
    rm -rf ${nats_tmp}
}

# Install frontend
installFrontEnd()
{
    if [ "$1" == "update" ]; then
        if [ -d /rmm/web ]; then
            sudo rm -rf /rmm/web
        fi

        if [ ! -d /var/www/rmm ]; then
            sudo mkdir -p /var/www/rmm
        fi
    fi

    webtar="trmm-web-v${WEB_VERSION}.tar.gz"
    wget -q https://github.com/amidaware/tacticalrmm-web/releases/download/v${WEB_VERSION}/${webtar} -O /tmp/${webtar}
    
    if [ "$1" == "update" ]; then
        sudo rm -rf /var/www/rmm/dist
    elif [ "$1" == "restore" ] || [ "$1" == "install" ]; then
        sudo mkdir -p /var/www/rmm
    fi
    sudo tar -xzf /tmp/${webtar} -C /var/www/rmm
    echo "window._env_ = {PROD_URL: \"https://${rmmdomain}\"}" | sudo tee /var/www/rmm/dist/env-config.js > /dev/null
    sudo chown www-data:www-data -R /var/www/rmm/dist
    rm -f /tmp/${webtar}
}

# Install Nginx
installNginx()
{
    if [ "$1" == "install" ] || [ "$1" == "devinstall" ]; then
	    sudo apt install -y nginx
	    sudo systemctl stop nginx
        sudo sed -i 's/worker_connections.*/worker_connections 2048;/g' /etc/nginx/nginx.conf
        sudo sed -i 's/# server_names_hash_bucket_size.*/server_names_hash_bucket_size 64;/g' /etc/nginx/nginx.conf
    elif [ "$1" == "updatepart1" ]; then
        # Check Nginx config
        if ! sudo nginx -t > /dev/null 2>&1; then
            sudo nginx -t
            echo -e "${RED} You have syntax errors in your nginx configs. See errors above. Please fix them and re-run this script.${NC}\n"
            echo -e "${RED} Aborting...${NC}\n"
            exit 1
        fi
    elif [ "$1" == "updatepart2" ]; then
        CHECK_NGINX_WORKER_CONN=$(grep "worker_connections 2048" /etc/nginx/nginx.conf)
        if ! [ $CHECK_NGINX_WORKER_CONN ]; then
            echo -e "${GREEN} Changing nginx worker connections to 2048${NC}\n"
            sudo sed -i 's/worker_connections.*/worker_connections 2048;/g' /etc/nginx/nginx.conf
        fi
        sudo sed -i 's/# server_names_hash_bucket_size.*/server_names_hash_bucket_size 64;/g' /etc/nginx/nginx.conf
    elif [ "$1" == "restore" ]; then
        sudo apt install -y nginx
	    sudo systemctl stop nginx
        sudo rm -rf /etc/nginx
        sudo mkdir /etc/nginx
        sudo tar -xzf $tmp_dir/nginx/etc-nginx.tar.gz -C /etc/nginx
        sudo sed -i 's/worker_connections.*/worker_connections 2048;/g' /etc/nginx/nginx.conf
        sudo sed -i 's/# server_names_hash_bucket_size.*/server_names_hash_bucket_size 64;/g' /etc/nginx/nginx.conf
        # Misc functions
        getExistingDomainInfo;
    fi
}

# Install NATS Api
installNatsApi()
{
    sudo cp /rmm/natsapi/bin/nats-api /usr/local/bin
    sudo chown "${USER}:${USER}" /usr/local/bin/nats-api
    sudo chmod +x /usr/local/bin/nats-api
}

# Install MeshCentral
installMeshCentral()
{
    MESH_VER=$(grep "^MESH_VER" "$SETTINGS_FILE" | awk -F'[= "]' '{print $5}')

    if [ "$1" == "install" ] || [ "$1" == "devinstall" ]; then
        sudo mkdir -p /meshcentral/meshcentral-data
    elif [ "$1" == "restore" ]; then
        sudo tar -xzf $tmp_dir/meshcentral/mesh.tar.gz -C /
    fi
    sudo chown "${USER}:${USER}" -R /meshcentral
    cd /meshcentral
    npm install meshcentral@${MESH_VER}
    sudo chown "${USER}:${USER}" -R /meshcentral
}

# Install fail2ban
installFail2ban()
{
    sudo apt install -y fail2ban

    # Copy default jail config to create override config
    sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
    sudo truncate -s 0 /etc/fail2ban/jail.local

    # Write default jail config override
    sudo chmod 777 /etc/fail2ban/jail.local
	sudo printf '[DEFAULT]' >> /etc/fail2ban/jail.local
	sudo printf "\nignoreip = 127.0.0.1/8" >> /etc/fail2ban/jail.local
	sudo printf "\n\n" >> /etc/fail2ban/jail.local
    sudo printf '[sshd]' >> /etc/fail2ban/jail.local
	sudo printf "\nenabled = true" >> /etc/fail2ban/jail.local
	sudo printf "\nport    = ssh" >> /etc/fail2ban/jail.local
	sudo printf "\n\n" >> /etc/fail2ban/jail.local
    sudo printf '[nginx-http-auth]' >> /etc/fail2ban/jail.local
    sudo printf "\nenabled = true" >> /etc/fail2ban/jail.local
    sudo printf "\n\n" >> /etc/fail2ban/jail.local
    sudo printf '[nginx-botsearch]' >> /etc/fail2ban/jail.local
    sudo printf "\nenabled = true" >> /etc/fail2ban/jail.local
    sudo printf "\n\n" >> /etc/fail2ban/jail.local
    sudo printf '[tacticalrmm]' >> /etc/fail2ban/jail.local
    sudo printf "\nenabled = true" >> /etc/fail2ban/jail.local
    sudo printf "\nport = http,https" >> /etc/fail2ban/jail.local
    sudo printf "\nfilter = tacticalrmm" >> /etc/fail2ban/jail.local
    sudo printf "\n" >> /etc/fail2ban/jail.local
    sudo printf 'action = iptables-allports[name=tactical]' >> /etc/fail2ban/jail.local
    sudo printf "\n" >> /etc/fail2ban/jail.local
    sudo printf 'logpath = /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log' >> /etc/fail2ban/jail.local
    sudo printf "\nmaxretry = 5" >> /etc/fail2ban/jail.local
    sudo printf "\nbantime = 3600" >> /etc/fail2ban/jail.local
    sudo printf "\nfindtime = 3600" >> /etc/fail2ban/jail.local
    sudo printf "\n\n" >> /etc/fail2ban/jail.local
    sudo printf '[recidive]' >> /etc/fail2ban/jail.local
	sudo printf "\nenabled = true" >> /etc/fail2ban/jail.local
	sudo printf "\nbantime = 31536000 ; 1 year" >> /etc/fail2ban/jail.local
	sudo chmod 644 /etc/fail2ban/jail.local

    # Copy default app config to create override config
    sudo cp /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local
	sudo truncate -s 0 /etc/fail2ban/fail2ban.local

    # Write default app config override
	sudo chmod 777 /etc/fail2ban/fail2ban.local
	sudo printf '[Definition]' >> /etc/fail2ban/fail2ban.local
	sudo printf "\ndbpurgeage = 31579200" >> /etc/fail2ban/fail2ban.local
	sudo printf "\nloglevel = INFO" >> /etc/fail2ban/fail2ban.local
	sudo chmod 644 /etc/fail2ban/fail2ban.local

    # Add T-RMM definition
    sudo echo '[Definition]' | sudo tee /etc/fail2ban/filter.d/tacticalrmm.conf
    sudo chmod 777 /etc/fail2ban/filter.d/tacticalrmm.conf
	sudo printf "\n" >> /etc/fail2ban/filter.d/tacticalrmm.conf
    sudo printf 'failregex = ^<HOST>.*400.17.*$' >> /etc/fail2ban/filter.d/tacticalrmm.conf
	sudo printf "\n" >> /etc/fail2ban/filter.d/tacticalrmm.conf
    sudo printf 'ignoreregex = ^<HOST>.*200.*$' >> /etc/fail2ban/filter.d/tacticalrmm.conf
	sudo chmod 644 /etc/fail2ban/filter.d/tacticalrmm.conf

    # Restart Fail2ban
    sudo systemctl restart fail2ban
}
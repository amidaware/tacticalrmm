###################
#  CFG file info  #
###################

CFG_VERSION="8"


#######################################
#  Config file and service functions  #
#######################################

# Generate mesh configuration
createMeshConfig()
{
    sudo cp /rmm/default-configs/mesh/config.json /meshcentral/meshcentral-data/config.json 2>&1 | tee -a "${currentlog}"

    sudo sed -i "s/mesh.example.com/$meshdomain/" /meshcentral/meshcentral-data/config.json 2>&1 | tee -a "${currentlog}"
}

# Generate local settings file
createLocalSettings()
{
    sudo cp /rmm/default-configs/python/local_settings.py /rmm/api/tacticalrmm/tacticalrmm/local_settings.py 2>&1 | tee -a "${currentlog}"

    sudo sed -i "s/DJANGO_SEKRET/$DJANGO_SEKRET/" /rmm/api/tacticalrmm/tacticalrmm/local_settings.py 2>&1 | tee -a "${currentlog}"
    sudo sed -i "s/api.example.com/$rmmdomain/" /rmm/api/tacticalrmm/tacticalrmm/local_settings.py 2>&1 | tee -a "${currentlog}"
    sudo sed -i "s/ADMINURL/$ADMINURL/" /rmm/api/tacticalrmm/tacticalrmm/local_settings.py 2>&1 | tee -a "${currentlog}"
    sudo sed -i "s/rmm.example.com/$frontenddomain/" /rmm/api/tacticalrmm/tacticalrmm/local_settings.py 2>&1 | tee -a "${currentlog}"
    sudo sed -i "s/pgusername/$pgusername/" /rmm/api/tacticalrmm/tacticalrmm/local_settings.py 2>&1 | tee -a "${currentlog}"
    sudo sed -i "s/pgpw/$pgpw/" /rmm/api/tacticalrmm/tacticalrmm/local_settings.py 2>&1 | tee -a "${currentlog}"
    sudo sed -i "s/meshusername/$meshusername/" /rmm/api/tacticalrmm/tacticalrmm/local_settings.py 2>&1 | tee -a "${currentlog}"
    sudo sed -i "s/mesh.example.com/$meshdomain/" /rmm/api/tacticalrmm/tacticalrmm/local_settings.py 2>&1 | tee -a "${currentlog}"
}

# Backend configuration
configureBackend()
{
    SETUPTOOLS_VER=$(grep "^SETUPTOOLS_VER" "$SETTINGS_FILE" | awk -F'[= "]' '{print $5}')
    WHEEL_VER=$(grep "^WHEEL_VER" "$SETTINGS_FILE" | awk -F'[= "]' '{print $5}')
    userconfirm="n"

    if [ "$1" == "update" ]; then
        CHECK_ADMIN_ENABLED=$(grep ADMIN_ENABLED /rmm/api/tacticalrmm/tacticalrmm/local_settings.py)
        if ! [[ $CHECK_ADMIN_ENABLED ]]; then
            sudo sed -i '$ a ADMIN_ENABLED = False' /rmm/api/tacticalrmm/tacticalrmm/local_settings.py 2>&1 | tee -a "${currentlog}"
        fi
        sudo cp /rmm/natsapi/bin/nats-api /usr/local/bin 2>&1 | tee -a "${currentlog}"
        sudo chown "${USER}:${USER}" /usr/local/bin/nats-api 2>&1 | tee -a "${currentlog}"
        sudo chmod +x /usr/local/bin/nats-api 2>&1 | tee -a "${currentlog}"
        if [ "${CURRENT_PIP_VER}" != "${LATEST_PIP_VER}" ] || [ "$UPDATE_TYPE" == "forced" ]; then
            rm -rf /rmm/api/env 2>&1 | tee -a "${currentlog}"
            cd /rmm/api 2>&1 | tee -a "${currentlog}"
            python3.10 -m venv env 2>&1 | tee -a "${currentlog}"
            source /rmm/api/env/bin/activate 2>&1 | tee -a "${currentlog}"
            cd /rmm/api/tacticalrmm 2>&1 | tee -a "${currentlog}"
            pip install --no-cache-dir --upgrade pip 2>&1 | tee -a "${currentlog}"
            pip install --no-cache-dir setuptools==${SETUPTOOLS_VER} wheel==${WHEEL_VER} 2>&1 | tee -a "${currentlog}"
            pip install --no-cache-dir -r requirements.txt 2>&1 | tee -a "${currentlog}"
        else
            source /rmm/api/env/bin/activate 2>&1 | tee -a "${currentlog}"
            cd /rmm/api/tacticalrmm 2>&1 | tee -a "${currentlog}"
            pip install -r /rmm/api/tacticalrmm/requirements.txt 2>&1 | tee -a "${currentlog}"
        fi
        python manage.py pre_update_tasks 2>&1 | tee -a "${currentlog}"
        celery -A tacticalrmm purge -f 2>&1 | tee -a "${currentlog}"
        python manage.py migrate 2>&1 | tee -a "${currentlog}"
        python manage.py delete_tokens 2>&1 | tee -a "${currentlog}"
        python manage.py collectstatic --no-input 2>&1 | tee -a "${currentlog}"
        python manage.py reload_nats 2>&1 | tee -a "${currentlog}"
        python manage.py load_chocos 2>&1 | tee -a "${currentlog}"
        python manage.py create_installer_user 2>&1 | tee -a "${currentlog}"
        python manage.py create_natsapi_conf 2>&1 | tee -a "${currentlog}"
        python manage.py post_update_tasks 2>&1 | tee -a "${currentlog}"
        rmmdomain=$(python manage.py get_config api)
        WEB_VERSION=$(python manage.py get_config webversion)
        deactivate 2>&1 | tee -a "${currentlog}"
    elif [ "$1" == "restore" ]; then
        cd /rmm/api 2>&1 | tee -a "${currentlog}"
        python3.10 -m venv env 2>&1 | tee -a "${currentlog}"
        source /rmm/api/env/bin/activate 2>&1 | tee -a "${currentlog}"
        cd /rmm/api/tacticalrmm 2>&1 | tee -a "${currentlog}"
        pip install --no-cache-dir --upgrade pip 2>&1 | tee -a "${currentlog}"
        pip install --no-cache-dir setuptools==${SETUPTOOLS_VER} wheel==${WHEEL_VER} 2>&1 | tee -a "${currentlog}"
        pip install --no-cache-dir -r /rmm/api/tacticalrmm/requirements.txt 2>&1 | tee -a "${currentlog}"
        python manage.py migrate 2>&1 | tee -a "${currentlog}"
        python manage.py collectstatic --no-input 2>&1 | tee -a "${currentlog}"
        python manage.py create_natsapi_conf 2>&1 | tee -a "${currentlog}"
        python manage.py reload_nats 2>&1 | tee -a "${currentlog}"
        python manage.py post_update_tasks 2>&1 | tee -a "${currentlog}"
        rmmdomain=$(python manage.py get_config api)
        WEB_VERSION=$(python manage.py get_config webversion)
        deactivate 2>&1 | tee -a "${currentlog}"
    elif [ "$1" == "install" ] || [ "$1" == "devinstall" ]; then
        cd /rmm/api 2>&1 | tee -a "${currentlog}"
        python3.10 -m venv env 2>&1 | tee -a "${currentlog}"
        source /rmm/api/env/bin/activate 2>&1 | tee -a "${currentlog}"
        cd /rmm/api/tacticalrmm 2>&1 | tee -a "${currentlog}"
        pip install --no-cache-dir --upgrade pip 2>&1 | tee -a "${currentlog}"
        pip install --no-cache-dir setuptools==${SETUPTOOLS_VER} wheel==${WHEEL_VER} 2>&1 | tee -a "${currentlog}"
        pip install --no-cache-dir -r /rmm/api/tacticalrmm/requirements.txt 2>&1 | tee -a "${currentlog}"
        python manage.py migrate 2>&1 | tee -a "${currentlog}"
        python manage.py collectstatic --no-input 2>&1 | tee -a "${currentlog}"
        python manage.py create_natsapi_conf 2>&1 | tee -a "${currentlog}"
        python manage.py load_chocos 2>&1 | tee -a "${currentlog}"
        python manage.py load_community_scripts 2>&1 | tee -a "${currentlog}"
        WEB_VERSION=$(python manage.py get_config webversion)
        if [ "$autoinstall" == "1" ]; then
            djangousername="$trmmuser"
            echo "from accounts.models import User; User.objects.create_superuser('${trmmuser}', '${letsemail}', '${trmmpass}') if not User.objects.filter(username='${trmmuser}').exists() else 0;" | python manage.py shell
        else
            until [ "$userconfirm" == "y" ]; do
                djangousername=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Create Site/Django Admin Login" --inputbox "Please enter the RMM website and django admin username you wish to use:" 10 90 3>&1 1>&2 2>&3)
                dialog --cr-wrap --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Create Site/Django Admin Login" --yesno "Is this correct?\n$djangousername" 0 0
                case $? in
                    0 ) userconfirm="y";;

                    1 ) userconfirm="n"
                        derpDerp;;
                esac
            done
        
            userconfirm="n"
            clear -x
            python manage.py createsuperuser --username ${djangousername} --email ${letsemail} 2>&1 | tee -a "${currentlog}"
            python manage.py create_installer_user 2>&1 | tee -a "${currentlog}"
            RANDBASE=$(python manage.py generate_totp)
            # Misc functions
            cls;
            python manage.py generate_barcode ${RANDBASE} ${djangousername} ${frontenddomain} 2>&1 | tee -a "${currentlog}"
            deactivate 2>&1 | tee -a "${currentlog}"
            read -n 1 -s -r -p "Press any key to continue..."
            echo -e "\n"
        fi
    fi
}

# Create UWSGI config
createUwsgiConf()
{
    sudo cp /rmm/default-configs/uwsgi/app.ini /rmm/api/tacticalrmm/app.ini 2>&1 | tee -a "${currentlog}"
}

# Create UWSGI service
createUwsgiService()
{
    sudo cp /rmm/service-definitions/rmm.service /etc/systemd/system/rmm.service 2>&1 | tee -a "${currentlog}"

    sudo sed -i "s/REPLACEME/${USER}/" /etc/systemd/system/rmm.service 2>&1 | tee -a "${currentlog}"
}

# Create Daphne service
createDaphneService()
{
    sudo cp /rmm/service-definitions/daphne.service /etc/systemd/system/daphne.service 2>&1 | tee -a "${currentlog}"

    sudo sed -i "s/REPLACEME/${USER}/" /etc/systemd/system/daphne.service 2>&1 | tee -a "${currentlog}"
}

# Create NATS service
createNatsService()
{
    sudo cp /rmm/service-definitions/nats.service /etc/systemd/system/nats.service 2>&1 | tee -a "${currentlog}"

    sudo sed -i "s/REPLACEME/${USER}/" /etc/systemd/system/nats.service 2>&1 | tee -a "${currentlog}"
}

# Create NATS service
createNatsApiService()
{
    sudo cp /rmm/service-definitions/nats-api.service /etc/systemd/system/nats-api.service 2>&1 | tee -a "${currentlog}"

    sudo sed -i "s/REPLACEME/${USER}/" /etc/systemd/system/nats-api.service 2>&1 | tee -a "${currentlog}"
}

# Create backend nginx conf
createBackendNginxConf()
{
    sudo cp /rmm/default-configs/nginx/rmm.conf /etc/nginx/sites-available/rmm.conf 2>&1 | tee -a "${currentlog}"

    sudo sed -i "s/api.example.com/$rmmdomain/" /etc/nginx/sites-available/rmm.conf 2>&1 | tee -a "${currentlog}"
    sudo sed -i "s/rmm.example.com/$frontenddomain/" /etc/nginx/sites-available/rmm.conf 2>&1 | tee -a "${currentlog}"
    if [ "$certtype" == "dns" ]; then
        sudo sed -i "s/rootdomain/$rootdomain/" /etc/nginx/sites-available/rmm.conf 2>&1 | tee -a "${currentlog}"
    elif [ "$certtype" == "webroot" ]; then
        sudo sed -i "s/letsencrypt\/live\/rootdomain\/fullchain.pem/ssl\/certs\/ssl-cert-snakeoil.pem/" /etc/nginx/sites-available/rmm.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/letsencrypt\/live\/rootdomain\/privkey.pem/ssl\/private\/ssl-cert-snakeoil.key/" /etc/nginx/sites-available/rmm.conf 2>&1 | tee -a "${currentlog}"
    fi
}

# Create Mesh nginx conf
createMeshNginxConf()
{
    sudo cp /rmm/default-configs/nginx/meshcentral.conf /etc/nginx/sites-available/meshcentral.conf 2>&1 | tee -a "${currentlog}"

    sudo sed -i "s/mesh.example.com/$meshdomain/" /etc/nginx/sites-available/meshcentral.conf 2>&1 | tee -a "${currentlog}"
    if [ "$certtype" == "dns" ]; then
        sudo sed -i "s/rootdomain/$rootdomain/" /etc/nginx/sites-available/meshcentral.conf 2>&1 | tee -a "${currentlog}"
    elif [ "$certtype" == "webroot" ]; then
        sudo sed -i "s/letsencrypt\/live\/rootdomain\/fullchain.pem/ssl\/certs\/ssl-cert-snakeoil.pem/" /etc/nginx/sites-available/meshcentral.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/letsencrypt\/live\/rootdomain\/privkey.pem/ssl\/private\/ssl-cert-snakeoil.key/" /etc/nginx/sites-available/meshcentral.conf 2>&1 | tee -a "${currentlog}"
    fi
}

# Create Celery service
createCeleryService()
{
    sudo cp /rmm/service-definitions/celery.service /etc/systemd/system/celery.service 2>&1 | tee -a "${currentlog}"

    sudo sed -i "s/REPLACEME/${USER}/" /etc/systemd/system/celery.service 2>&1 | tee -a "${currentlog}"
}

# Create Celery config
createCeleryConf()
{
    sudo cp /rmm/default-configs/celery/celery.conf /etc/conf.d/celery.conf 2>&1 | tee -a "${currentlog}"
}

# Create CeleryBeat service
createCeleryBeatService()
{
    sudo cp /rmm/service-definitions/celerybeat.service /etc/systemd/system/celerybeat.service 2>&1 | tee -a "${currentlog}"

    sudo sed -i "s/REPLACEME/${USER}/" /etc/systemd/system/celerybeat.service 2>&1 | tee -a "${currentlog}"
}

# Create MeshCentral service
createMeshCentralService()
{
    sudo cp /rmm/service-definitions/meshcentral.service /etc/systemd/system/meshcentral.service 2>&1 | tee -a "${currentlog}"

    sudo sed -i "s/REPLACEME/${USER}/" /etc/systemd/system/meshcentral.service 2>&1 | tee -a "${currentlog}"
}

# Create Frontend Nginx config
createFrontendNginxConf()
{
    sudo cp /rmm/default-configs/nginx/frontend.conf /etc/nginx/sites-available/frontend.conf 2>&1 | tee -a "${currentlog}"

    sudo sed -i "s/rmm.example.com/$frontenddomain/" /etc/nginx/sites-available/frontend.conf 2>&1 | tee -a "${currentlog}"
    if [ "$certtype" == "dns" ]; then
        sudo sed -i "s/rootdomain/$rootdomain/" /etc/nginx/sites-available/frontend.conf 2>&1 | tee -a "${currentlog}"
    elif [ "$certtype" == "webroot" ]; then
        sudo sed -i "s/letsencrypt\/live\/rootdomain\/fullchain.pem/ssl\/certs\/ssl-cert-snakeoil.pem/" /etc/nginx/sites-available/frontend.conf 2>&1 | tee -a "${currentlog}"
        sudo sed -i "s/letsencrypt\/live\/rootdomain\/privkey.pem/ssl\/private\/ssl-cert-snakeoil.key/" /etc/nginx/sites-available/frontend.conf 2>&1 | tee -a "${currentlog}"
    fi
}

# Enable MeshCentral service
enableMeshService()
{
    if [ "$1" != "update" ]; then
        sudo systemctl enable meshcentral 2>&1 | tee -a "${currentlog}"
    fi
    sudo systemctl restart meshcentral 2>&1 | tee -a "${currentlog}"
    sleep 3

    # The first time we start meshcentral, it will need some time to generate certs and install plugins.
    # This will take anywhere from a few seconds to a few minutes depending on the server's hardware
    # We will know it's ready once the last line of the systemd service stdout is 'MeshCentral HTTP server running on port.....'
    while ! [[ $CHECK_MESH_READY ]]; do
        CHECK_MESH_READY=$(sudo journalctl -u meshcentral.service -b --no-pager | grep "MeshCentral HTTP server running on port")
        echo -e "${YELLOW} Mesh Central not ready yet...${NC}" | tee -a "${currentlog}"
        sleep 3
    done
}

# Generate Mesh Token
generateMeshToken()
{
    MESHTOKENKEY="$(node /meshcentral/node_modules/meshcentral --logintokenkey)"

    sudo sed -i '$ a MESH_TOKEN_KEY = "MESHTOKENKEY"' /rmm/api/tacticalrmm/tacticalrmm/local_settings.py 2>&1 | tee -a "${currentlog}"
    sudo sed -i "s/MESHTOKENKEY/$MESHTOKENKEY/" /rmm/api/tacticalrmm/tacticalrmm/local_settings.py 2>&1 | tee -a "${currentlog}"
}

# Configure Mesh user and group, restart service
configMeshUserGroup()
{
    sudo systemctl stop meshcentral 2>&1 | tee -a "${currentlog}"
    sleep 1
    cd /meshcentral 2>&1 | tee -a "${currentlog}"

    node node_modules/meshcentral --createaccount ${meshusername} --pass ${MESHPASSWD} --email ${letsemail} 2>&1 | tee -a "${currentlog}"
    sleep 1
    node node_modules/meshcentral --adminaccount ${meshusername} 2>&1 | tee -a "${currentlog}"

    sudo systemctl start meshcentral 2>&1 | tee -a "${currentlog}"
    sleep 5

    while ! [[ $CHECK_MESH_READY2 ]]; do
        CHECK_MESH_READY2=$(sudo journalctl -u meshcentral.service -b --no-pager | grep "MeshCentral HTTP server running on port")
        echo -e "${YELLOW} Mesh Central not ready yet...${NC}" | tee -a "${currentlog}"
        sleep 3
    done

    node node_modules/meshcentral/meshctrl.js --url wss://${meshdomain} --loginuser ${meshusername} --loginpass ${MESHPASSWD} AddDeviceGroup --name TacticalRMM 2>&1 | tee -a "${currentlog}"
    sleep 1
}

# Configure and enable NATS service
enableNatsService()
{
    sudo systemctl enable nats.service 2>&1 | tee -a "${currentlog}"
    cd /rmm/api/tacticalrmm 2>&1 | tee -a "${currentlog}"
    source /rmm/api/env/bin/activate 2>&1 | tee -a "${currentlog}"
    python manage.py initial_db_setup 2>&1 | tee -a "${currentlog}"
    python manage.py reload_nats 2>&1 | tee -a "${currentlog}"
    deactivate 2>&1 | tee -a "${currentlog}"
    sudo systemctl start nats.service 2>&1 | tee -a "${currentlog}"

    sleep 1
    sudo systemctl enable nats-api.service 2>&1 | tee -a "${currentlog}"
    sudo systemctl start nats-api.service 2>&1 | tee -a "${currentlog}"
}
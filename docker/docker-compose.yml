version: "3.7"

# networks
networks:
  proxy:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
  api-db: null
  redis: null
  mesh-db: null

# docker managed persistent volumes
volumes:
  scnplus_data: null
  postgres_data: null
  mongo_data: null
  mesh_data: null
  redis_data: null

services:
  # postgres database for api service
  scnplus-postgres:
    container_name: scnplus-postgres
    image: postgres:13-alpine
    restart: always
    environment:
      POSTGRES_DB: tacticalrmm
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASS: ${POSTGRES_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - api-db

  # redis container for celery tasks
  scnplus-redis:
    container_name: scnplus-redis
    image: redis:6.0-alpine
    user: 1000:1000
    command: redis-server
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - redis

  # used to initialize the docker environment
  scnplus-init:
    container_name: scnplus-init
    image: ${IMAGE_REPO}scnplus:${VERSION}
    restart: on-failure
    command: ["scnplus-init"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASS: ${POSTGRES_PASS}
      APP_HOST: ${APP_HOST}
      API_HOST: ${API_HOST}
      MESH_USER: ${MESH_USER}
      MESH_HOST: ${MESH_HOST}
      TRMM_USER: ${TRMM_USER}
      TRMM_PASS: ${TRMM_PASS}
      TRMM_DISABLE_WEB_TERMINAL: ${TRMM_DISABLE_WEB_TERMINAL}
      TRMM_DISABLE_SERVER_SCRIPTS: ${TRMM_DISABLE_SERVER_SCRIPTS}
      TRMM_DISABLE_SSO: ${TRMM_DISABLE_SSO}
    depends_on:
      - scnplus-postgres
      - scnplus-meshcentral
      - scnplus-redis
    networks:
      - api-db
      - proxy
      - redis
    volumes:
      - scnplus_data:/opt/scnplus
      - mesh_data:/meshcentral-data
      - mongo_data:/mongo/data/db
      - redis_data:/redis/data

  # nats
  scnplus-nats:
    container_name: scnplus-nats
    image: ${IMAGE_REPO}scnplus-nats:${VERSION}
    user: 1000:1000
    restart: always
    environment:
      API_HOST: ${API_HOST}
    volumes:
      - scnplus_data:/opt/scnplus
    networks:
      api-db: null
      proxy:
        aliases:
          - ${API_HOST}

  # meshcentral container
  scnplus-meshcentral:
    container_name: scnplus-meshcentral
    image: ${IMAGE_REPO}scnplus-meshcentral:${VERSION}
    user: 1000:1000
    restart: always
    environment:
      MESH_HOST: ${MESH_HOST}
      MESH_USER: ${MESH_USER}
      MESH_PASS: ${MESH_PASS}
      MONGODB_USER: ${MONGODB_USER}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MESH_PERSISTENT_CONFIG: ${MESH_PERSISTENT_CONFIG}
    networks:
      proxy:
        aliases:
          - ${MESH_HOST}
      mesh-db: null
    volumes:
      - scnplus_data:/opt/scnplus
      - mesh_data:/home/node/app/meshcentral-data
    depends_on:
      - scnplus-mongodb

  # mongodb container for meshcentral
  scnplus-mongodb:
    container_name: scnplus-mongodb
    image: mongo:4.4
    user: 1000:1000
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: meshcentral
    networks:
      - mesh-db
    volumes:
      - mongo_data:/data/db

  # container that hosts vue frontend
  scnplus-frontend:
    container_name: scnplus-frontend
    image: ${IMAGE_REPO}scnplus-frontend:${VERSION}
    user: 1000:1000
    restart: always
    networks:
      - proxy
    volumes:
      - scnplus_data:/opt/scnplus
    environment:
      API_HOST: ${API_HOST}

  # container for django backend
  scnplus-backend:
    container_name: scnplus-backend
    image: ${IMAGE_REPO}scnplus:${VERSION}
    user: 1000:1000
    command: ["scnplus-backend"]
    restart: always
    networks:
      - proxy
      - api-db
      - redis
    volumes:
      - scnplus_data:/opt/scnplus
    depends_on:
      - scnplus-postgres

  # container for django websockets connections
  scnplus-websockets:
    container_name: scnplus-websockets
    image: ${IMAGE_REPO}scnplus:${VERSION}
    user: 1000:1000
    command: ["scnplus-websockets"]
    restart: always
    networks:
      - proxy
      - api-db
      - redis
    volumes:
      - scnplus_data:/opt/scnplus
    depends_on:
      - scnplus-postgres
      - scnplus-backend

  # container for scnplus reverse proxy
  scnplus-nginx:
    container_name: scnplus-nginx
    image: ${IMAGE_REPO}scnplus-nginx:${VERSION}
    user: 1000:1000
    restart: always
    environment:
      APP_HOST: ${APP_HOST}
      API_HOST: ${API_HOST}
      MESH_HOST: ${MESH_HOST}
      CERT_PUB_KEY: ${CERT_PUB_KEY}
      CERT_PRIV_KEY: ${CERT_PRIV_KEY}
    networks:
      proxy:
        ipv4_address: 172.20.0.20
    ports:
      - "${TRMM_HTTP_PORT-80}:8080"
      - "${TRMM_HTTPS_PORT-443}:4443"
    volumes:
      - scnplus_data:/opt/scnplus

  # container for celery worker service
  scnplus-celery:
    container_name: scnplus-celery
    image: ${IMAGE_REPO}scnplus:${VERSION}
    user: 1000:1000
    command: ["scnplus-celery"]
    restart: always
    networks:
      - redis
      - proxy
      - api-db
    volumes:
      - scnplus_data:/opt/scnplus
    depends_on:
      - scnplus-postgres
      - scnplus-redis

  # container for celery beat service
  scnplus-celerybeat:
    container_name: scnplus-celerybeat
    image: ${IMAGE_REPO}scnplus:${VERSION}
    user: 1000:1000
    command: ["scnplus-celerybeat"]
    restart: always
    networks:
      - proxy
      - redis
      - api-db
    volumes:
      - scnplus_data:/opt/scnplus
    depends_on:
      - scnplus-postgres
      - scnplus-redis
###################
#  CFG file info  #
###################

CFG_VERSION="5"


###########################################
#  Update and Restore specific functions  #
###########################################

# Check that user is same as during install
checkSameUser()
{
    strip="User="
    if [ "$1" == "update" ]; then
        ORIGUSER=$(grep ${strip} /etc/systemd/system/rmm.service | sed -e "s/^${strip}//")
    elif [ "$1" == "restore" ]; then
        ORIGUSER=$(grep ${strip} $tmp_dir/systemd/rmm.service | sed -e "s/^${strip}//")
    fi
    if [ "$ORIGUSER" != "$USER" ]; then
        dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "You must run this update script from the same user account used during install: ${ORIGUSER}\n\nExiting." 0 0
        if [ "$1" == "restore" ]; then
            rm -rf $tmp_dir
        fi
        clear -x
        exit 1
    fi
}

# Check if T-RMM update is necessary
checkIfUpdate()
{
    TMP_SETTINGS=$(mktemp -p "" "rmmsettings_XXXXXXXXXX")
    curl -s -L "${LATEST_SETTINGS_URL}" > ${TMP_SETTINGS}

    LATEST_TRMM_VER=$(grep "^TRMM_VERSION" "$TMP_SETTINGS" | awk -F'[= "]' '{print $5}')
    CURRENT_TRMM_VER=$(grep "^TRMM_VERSION" "$SETTINGS_FILE" | awk -F'[= "]' '{print $5}')

    if [ "${CURRENT_TRMM_VER}" == "${LATEST_TRMM_VER}" ] && [ "$UPDATE_TYPE" == "standard" ]; then
        printf >&2 "${GREEN}Already on latest version. Current version: ${CURRENT_TRMM_VER} Latest version: ${LATEST_TRMM_VER}${NC}\n"
        rm -f $TMP_SETTINGS
        exit 0
    fi
}

# Get current versions of necessary included apps
checkAdditionalAppsVers()
{
    LATEST_MESH_VER=$(grep "^MESH_VER" "$TMP_SETTINGS" | awk -F'[= "]' '{print $5}')
    LATEST_PIP_VER=$(grep "^PIP_VER" "$TMP_SETTINGS" | awk -F'[= "]' '{print $5}')
    NATS_SERVER_VER=$(grep "^NATS_SERVER_VER" "$TMP_SETTINGS" | awk -F'[= "]' '{print $5}')
    CURRENT_PIP_VER=$(grep "^PIP_VER" "$SETTINGS_FILE" | awk -F'[= "]' '{print $5}')
}

# Check CHECK_NATS_LIMITNOFILE, whatever that means
checkNatsLimitNoFile()
{
    CHECK_NATS_LIMITNOFILE=$(grep LimitNOFILE /etc/systemd/system/nats.service)
    if ! [ $CHECK_NATS_LIMITNOFILE ]; then

        sudo rm -f /etc/systemd/system/nats.service
        createNatsService;
        sudo systemctl daemon-reload
    fi
}

# Disable Redis append only
turnOffRedisAppendOnly()
{
    printf >&2 "${GREEN}Turning off redis aof${NC}\n"
    sudo redis-cli config set appendonly no
    sudo redis-cli config rewrite
    sudo rm -f /var/lib/redis/appendonly.aof
}

# Update MeshCentral
updateMeshCentral()
{
    CURRENT_MESH_VER=$(cd /meshcentral/node_modules/meshcentral && node -p -e "require('./package.json').version")
    if [ "${CURRENT_MESH_VER}" != "${LATEST_MESH_VER}" ] || [ "$force" = true ]; then
        printf >&2 "${GREEN}Updating meshcentral from ${CURRENT_MESH_VER} to ${LATEST_MESH_VER}${NC}\n"
        sudo systemctl stop meshcentral
        sudo chown "${USER}:${USER}" -R /meshcentral
        cd /meshcentral
        rm -rf node_modules/
        npm install meshcentral@${LATEST_MESH_VER}
        sudo chown "${USER}:${USER}" -R /meshcentral
    fi
}

# Get backup location
getBackupFileLocation()
{
    backuppath=""
    userconfirm="n"

    until [ "$userconfirm" == "y" ]; do
        backuppath=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Enter Path to Backup File" --inputbox "Enter the full path to the backup file, including filename:" 10 90 3>&1 1>&2 2>&3)
        dialog --cr-wrap --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Backup File Path" --yesno "Is this correct?\n$backuppath" 0 0
        case $? in
            0 ) userconfirm="y";;

            1 ) userconfirm="n"
                derpDerp;;
        esac
        if [ ! -f "$backuppath" ]; then
            userconfirm="n"
            derpDerp;
        else
            userconfirm="y"
        fi
    done
    userconfirm="n"
}

# Extract backup
extractBackup()
{
    print_green 'Unpacking backup'
    tmp_dir=$(mktemp -d -t tacticalrmm-XXXXXXXXXXXXXXXXXXXXX)

    tar -xf ${1} -C $tmp_dir
}
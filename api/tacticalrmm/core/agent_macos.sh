#!/usr/bin/env bash

if [ $EUID -ne 0 ]; then
  echo "ERROR: Must be run as root"
  exit 1
fi

while getopts :a:d:t:c:s:n:p:gu flag
do
    case "${flag}" in
        a) agentDownload=${OPTARG};;
        d) domain=${OPTARG};;
        t) token=${OPTARG};;
        c) clientID=${OPTARG};;
        s) siteID=${OPTARG};;
        n) agentType=${OPTARG};;
        p) proxy=${OPTARG};;
        g) debug=1;;
        u) uninstall=1;;
    esac
done

agentBinPath='/opt/tactical'
binName='tacticalagent'
agentConf='/etc/tacticalagent'
agentSvcName='com.tactical'
agentSysD="/Library/LaunchDaemons/com.tactical.plist"
meshDir='/opt/tacticalmesh'
meshSystemBin="${meshDir}/meshagent"

if [[ "${uninstall}" -eq 1 ]]; then
    echo "Uninstalling Tactical and Mesh Agent..."
    launchctl stop com.tactical.plist
    launchctl unload ${agentSysD}
    rm ${agentSysD}
    rm "${agentBinPath}/${binName}"
    ${meshSystemBin} -uninstall
    exit
fi

if test -z "$agentDownload" || test -z "$domain" || test -z "$token" || test -z "$clientID" || test -z "$siteID" || test -z "$agentType"
then
    printf '%s\n'\
            "Usage: agent_macos.sh"\
            "-a \"https://macagentdownload\""\
            "-d base domain eg) mycompany.com"\
            "-t \"token generated by trmm\""\
            "-c client id"\
            "-s site id"\
            "-n server or workstation"\
            "-p proxy (optional)"\
            "-g (debug optional)"
else
    meshDL="https://mesh.${domain}/meshagents?id=10005"
    apiURL="https://api.${domain}"
    agentBin="${agentBinPath}/${binName}"
    mkdir -p ${agentBinPath}
    echo "Downloading tactical agent..."
    curl --insecure -k "${agentDownload}" -Lo ${agentBin}
    chmod +x ${agentBin}

    echo "Downloading mesh agent..."

    meshTmpDir="/tmp/mesh"
    meshTmpBin="${meshTmpDir}/meshagent"
    mkdir -p ${meshTmpDir}
    curl --insecure -k "${meshDL}" -Lo ${meshTmpBin}
    chmod +x ${meshTmpBin}
    mkdir -p ${meshDir}
    eval env LC_ALL=en_US.UTF-8 LANGUAGE=en_US ${meshTmpBin} -install --installPath=${meshDir}
    sleep 2
    rm -rf ${meshTmpDir}

    echo "Getting mesh node id..."
    MESH_NODE_ID=$(${agentBin} -m nixmeshnodeid)

    if [ ! -d "${agentBinPath}" ]; then
        echo "Creating ${agentBinPath}"
        mkdir -p ${agentBinPath}
    fi

    if [[ "${debug}" -eq 1 ]]; then
        INSTALL_CMD="${agentBin} -m install -api ${apiURL} -client-id ${clientID} -site-id ${siteID} -agent-type ${agentType} -auth ${token} -log debug"
    else
        INSTALL_CMD="${agentBin} -m install -api ${apiURL} -client-id ${clientID} -site-id ${siteID} -agent-type ${agentType} -auth ${token}"
    fi

    if [ "${MESH_NODE_ID}" != '' ]; then
        INSTALL_CMD+=" -meshnodeid ${MESH_NODE_ID}"
    fi

    if [ "${proxy}" != '' ]; then
        INSTALL_CMD+=" -proxy ${proxy}"
    fi

    eval ${INSTALL_CMD}

    chmod +x ${agentBin}

    tacticalsvc="$(cat << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN"
    "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>Label</key>
        <string>com.tactical.plist</string>
        <key>ServiceDescription</key>
        <string>Tactical RMM Service</string>
        <key>ProgramArguments</key>
        <array>             
            <string>${agentBin}</string>
            <string>-m</string>
            <string>svc</string>
        </array>
        <key>RunAtLoad</key>
        <true/>
        <key>KeepAlive</key>
        <true/>
    </dict>
</plist>
EOF
)"
    echo "${tacticalsvc}" | tee ${agentSysD} > /dev/null

    launchctl load ${agentSysD}

    launchctl start com.tactical.plist

    echo "Installation complete."
fi

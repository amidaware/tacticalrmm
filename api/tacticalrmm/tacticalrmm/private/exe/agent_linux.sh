#!/usr/bin/env bash

if [ $EUID -ne 0 ]; then
  echo "ERROR: Must be run as root"
  exit 1
fi

HAS_SYSTEMD=$(ps --no-headers -o comm 1)
if [ "${HAS_SYSTEMD}" != 'systemd' ]; then
    echo "This install script only supports systemd"
    echo "Please install systemd or manually create the service using your systems's service manager"
    exit 1
fi

deb=(ubuntu debian raspbian kali)
rhe=(fedora rocky centos rhel amzn arch opensuse)

set_locale_deb() {
    /usr/sbin/locale-gen "en_US.UTF-8"
    localectl set-locale LANG=en_US.UTF-8
    . /etc/default/locale
}

set_locale_rhel() {
    localedef -c -i en_US -f UTF-8 en_US.UTF-8 > /dev/null 2>&1
    localectl set-locale LANG=en_US.UTF-8
    . /etc/locale.conf
}

RemoveOldAgent() {
    if [ -f "${agentSysD}" ]; then
        systemctl disable --now ${agentSvcName}
        rm -f ${agentSysD}
        systemctl daemon-reload
    fi

    if [ -f "${agentConf}" ]; then
        rm -f ${agentConf}
    fi

    if [ -f "${agentBin}" ]; then
        rm -f ${agentBin}
    fi
}

InstallMesh() {
        if [ -f /etc/os-release ]; then
        distroID=$(. /etc/os-release; echo $ID)
        if [[ " ${deb[*]} " =~ " ${distroID} " ]]; then
            set_locale_deb
        elif [[ " ${rhe[*]} " =~ " ${distroID} " ]]; then
            set_locale_rhel
        else
            set_locale_rhel
        fi
    fi

    meshTmpDir=$(mktemp -d -t "mesh-XXXXXXXXX")
    if [ $? -ne 0 ]; then
        meshTmpDir='meshtemp'
        mkdir -p ${meshTmpDir}
    fi
    meshTmpBin="${meshTmpDir}/meshagent"
    wget --no-check-certificate -q -O ${meshTmpBin} ${meshDL}
    chmod +x ${meshTmpBin}
    mkdir -p ${meshDir}
    env LC_ALL=en_US.UTF-8 LANGUAGE=en_US ${meshTmpBin} -install --installPath=${meshDir}
    sleep 1
    rm -rf ${meshTmpDir}
}

RemoveMesh() {
    if [ -f "${meshSystemBin}" ]; then
        ${meshSystemBin} -uninstall
        sleep 1
    fi

    if [ -f "${meshSysD}" ]; then
        systemctl disable --now ${meshSvcName} > /dev/null 2>&1
        rm -f ${meshSysD}
    fi

    rm -rf ${meshDir}
    systemctl daemon-reload
}

Uninstall() {
    RemoveMesh
    RemoveOldAgent
}

while getopts a:d:t:c:s:n:p:debug: flag
do
    case "${flag}" in
        a) agentDownload=${OPTARG};;
        d) domain=${OPTARG};;
        t) token=${OPTARG};;
        c) clientID=${OPTARG};;
        s) siteID=${OPTARG};;
        n) agentType=${OPTARG};;
        p) proxy=${OPTARG};;
        debug) debug=1;;
    esac
done

if test -z "$agentDownload" || test -z "$domain" || test -z "$token" || test -z "$clientID" || test -z "$siteID" || test -z "$agentType"
then
    printf '%s\n'\
            "Usage: agent_linux.sh"\
            "-a \"http://linuxagentdownload\""\
            "-d base domain eg) mycompany.com"\
            "-t \"token generated by trmm\""\
            "-c client id"\
            "-s site id"\
            "-n server or workstation"\
            "-p proxy (optional)"\
            "-debug log installation"
else
    meshDL="https://mesh.${domain}/meshagents?id=6"
    apiURL="https://api.${domain}"

    agentBinPath='/usr/local/bin'
    binName='tacticalagent'
    agentBin="${agentBinPath}/${binName}"
    agentConf='/etc/tacticalagent'
    agentSvcName='tacticalagent.service'
    agentSysD="/etc/systemd/system/${agentSvcName}"
    meshDir='/opt/tacticalmesh'
    meshSystemBin="${meshDir}/meshagent"
    meshSvcName='meshagent.service'
    meshSysD="/lib/systemd/system/${meshSvcName}"

    if [ $# -ne 0 ] && [ $1 == 'uninstall' ]; then
        Uninstall
        exit 0
    fi

    RemoveOldAgent

    echo "Downloading tactical agent..."
    wget -q -O ${agentBin} "${agentDownload}"
    chmod +x ${agentBin}

    MESH_NODE_ID=""

    if [ $# -ne 0 ] && [ $1 == '--nomesh' ]; then
        echo "Skipping mesh install"
    else
        if [ -f "${meshSystemBin}" ]; then
            RemoveMesh
        fi
        echo "Downloading and installing mesh agent..."
        InstallMesh
        sleep 2
        echo "Getting mesh node id..."
        MESH_NODE_ID=$(${agentBin} -m nixmeshnodeid)
    fi

    if [ ! -d "${agentBinPath}" ]; then
        echo "Creating ${agentBinPath}"
        mkdir -p ${agentBinPath}
    fi

    if [[ "${debug}" -eq 1 ]]; then
        INSTALL_CMD="${agentBin} -m install -api ${apiURL} -client-id ${clientID} -site-id ${siteID} -agent-type ${agentType} -auth ${token} -log debug"
    else
        INSTALL_CMD="${agentBin} -m install -api ${apiURL} -client-id ${clientID} -site-id ${siteID} -agent-type ${agentType} -auth ${token}"
    fi

    if [ "${MESH_NODE_ID}" != '' ]; then
        INSTALL_CMD+=" -meshnodeid ${MESH_NODE_ID}"
    fi

    if [ "${proxy}" != '' ]; then
        INSTALL_CMD+=" -proxy ${proxy}"
    fi

    eval ${INSTALL_CMD}

tacticalsvc="$(cat << EOF
[Unit]
Description=Tactical RMM Linux Agent

[Service]
Type=simple
ExecStart=${agentBin} -m svc
User=root
Group=root
Restart=always
RestartSec=5s
LimitNOFILE=1000000
KillMode=process

[Install]
WantedBy=multi-user.target
EOF
)"
    echo "${tacticalsvc}" | tee ${agentSysD} > /dev/null

    systemctl daemon-reload
    systemctl enable --now ${agentSvcName}
fi
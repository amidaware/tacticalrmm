###################
#  CFG file info  #
###################

CFG_VERSION="8"


###############################
#  Troubleshooting functions  #
###############################

# Ping to test if domain is live
pingDomain()
{
    if ( ping -c 1 $1 &> /dev/null ); then
        echo -e "${GREEN} Verified $1${NC}" | tee -a checklog.log
        printf >&2 "\n"
    else
        dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "$1 doesnt exist please create it or check for a typo.\n\nYou will have a log file called checklog.log in the directory you ran this script from.\n\nExiting." 0 0
        clear -x
        exit
    fi
}

# Check IPs
checkIPisLive()
{
    locinputip=`dig @"$locdns" +short $1`
    reminputip=`dig @8.8.8.8 +short $1`

    if [ "$locinputip" == "$reminputip" ]; then
        echo -e "${GREEN} Success $1 is Locally Resolved: ${locinputip}  Remotely Resolved: ${reminputip}${NC}" | tee -a checklog.log
	    printf >&2 "\n"
    else
	    echo -e "${RED} Locally Resolved: ${locinputip}  Remotely Resolved: ${reminputip}${NC}" | tee -a checklog.log
	    printf >&2 "\n" | tee -a checklog.log
        echo -e "${RED} Your Local and Remote IP for $1 all agents will require non-public DNS to find TRMM server.${NC}" | tee -a checklog.log
	    printf >&2 "\n"
    fi
}

# Check services status
readServicesStatus()
{
    rmmstatus=$(systemctl is-active rmm)
    daphnestatus=$(systemctl is-active daphne)
    celerystatus=$(systemctl is-active celery)
    celerybeatstatus=$(systemctl is-active celerybeat)
    nginxstatus=$(systemctl is-active nginx)
    natsstatus=$(systemctl is-active nats)
    natsapistatus=$(systemctl is-active nats-api)
    meshcentralstatus=$(systemctl is-active meshcentral)
    mongodstatus=$(systemctl is-active mongod)
    postgresqlstatus=$(systemctl is-active postgresql)
    redisserverstatus=$(systemctl is-active redis-server)
}

# Verify services active
checkIfServiceActive()
{
    if [ $1 = active ]; then
        echo -e "${GREEN} Success $2 is Running.${NC}" | tee -a checklog.log
	    printf >&2 "\n"
    else
        echo -e "${RED} $2 is not running. \(Tactical will not work without this\)${NC}" | tee -a checklog.log
	    printf >&2 "\n"
    fi
}

# Check for open ports
isPortOpen()
{
    if ( nc -zv $wanip $1 2>&1 >/dev/null ); then
        echo -e "${GREEN} $2 Port is open.${NC}" | tee -a checklog.log
	    printf >&2 "\n"
    else
        echo -e "${RED} $2 port is closed. \(you may want this if running locally only\)${NC}" | tee -a checklog.log
	    printf >&2 "\n"
    fi
}

# Check proxy
checkProxy()
{
    echo -e "${YELLOW} Checking For Proxy.${NC}" | tee -a checklog.log
    printf >&2 "\n"
	print_yellow "......this might take a while!!"

    # Detect Proxy via cert
    proxyext="$(openssl s_client -showcerts -servername $remapiip -connect $remapiip:443 2>/dev/null | openssl x509 -inform pem -noout -text)"
    proxyint="$(openssl s_client -showcerts -servername 127.0.0.1 -connect 127.0.0.1:443 2>/dev/null | openssl x509 -inform pem -noout -text)"

    if [[ "$proxyext" == "$proxyint" ]]; then
        echo -e "${GREEN} No Proxy detected using Certificate.${NC}" | tee -a checklog.log
	    printf >&2 "\n"
    else
        echo -e "${YELLOW} Proxy detected using Certificate.${NC}" | tee -a checklog.log
	    printf >&2 "\n"
    fi

    # Detect Proxy via IP
    if [ "$wanip" != "$remrmmip" ]; then
        echo -e "${YELLOW} Proxy detected using IP.${NC}" | tee -a checklog.log
	    printf >&2 "\n"
    else
        echo -e "${GREEN} No Proxy detected using IP.${NC}" | tee -a checklog.log
	    printf >&2 "\n"
    fi
}

# Check for valid cert
checkIfCertIsValid()
{
    echo -e "${YELLOW} Checking if SSL Certificate is up to date.${NC}" | tee -a checklog.log 
	printf >&2 "\n"

    # SSL Certificate check
    cert="$(openssl verify -CAfile /etc/letsencrypt/live/$rootdomain/chain.pem /etc/letsencrypt/live/$rootdomain/cert.pem)"

    if [[ "$cert" == *"OK"* ]]; then
        echo -e "${GREEN} SSL Certificate for $rootdomain is fine.${NC}"  | tee -a checklog.log
	    printf >&2 "\n"
    else
        echo -e "${RED} SSL Certificate has expired or doesnt exist for $rootdomain.${NC}"  | tee -a checklog.log
	    printf >&2 "\n"
    fi
}
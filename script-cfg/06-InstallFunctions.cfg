###################
#  CFG file info  #
###################

CFG_VERSION="8"


#######################
#  Install Functions  #
#######################

# Install script prereqs
installPreReqs()
{
    if [ "$autoinstall" == "1" ]; then
        if [ -z "$sudopass" ]; then
            sudo apt-get update && sudo apt-get install -y curl vim wget dirmngr gnupg lsb-release ncurses-base ncurses-bin ncurses-doc ncurses-examples ncurses-term dialog libncurses5 libncursesw5 libncurses5-dev libncursesw5-dev 2>&1 | tee -a "${currentlog}"
        elif [ -n "$sudopass" ]; then
            echo "$sudopass" | sudo -S apt-get update && sudo apt-get install -y curl vim wget dirmngr gnupg lsb-release ncurses-base ncurses-bin ncurses-doc ncurses-examples ncurses-term dialog libncurses5 libncursesw5 libncurses5-dev libncursesw5-dev 2>&1 | tee -a "${currentlog}"
        fi
    elif [ "$autoinstall" != "1" ]; then
        sudo apt-get update && sudo apt-get install -y curl vim wget dirmngr gnupg lsb-release ncurses-base ncurses-bin ncurses-doc ncurses-examples ncurses-term dialog libncurses5 libncursesw5 libncurses5-dev libncursesw5-dev 2>&1 | tee -a "${currentlog}"
    fi
}

# Install remaining prereqs
installAdditionalPreReqs()
{
    sudo apt-get install -y software-properties-common dnsutils openssl ca-certificates apt-transport-https gcc g++ make build-essential zlib1g-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev libbz2-dev git 2>&1 | tee -a "${currentlog}"
}

# Configure repos for stuff
setInstallRepos()
{
    local tempcodename="$codename"

    # There is no Jammy repo yet so use Focal for Ubuntu 22.04
    if [ "$osname" == "ubuntu" ] && [ "$fullrelno" == "20.04" ]; then
        mongodb_repo="deb [arch=amd64] https://repo.mongodb.org/apt/$osname $codename/mongodb-org/4.4 multiverse"
    elif [ "$osname" == "ubuntu" ] && [ "$fullrelno" == "22.04" ]; then
        codename="focal"
        mongodb_repo="deb [arch=amd64] https://repo.mongodb.org/apt/$osname $codename/mongodb-org/4.4 multiverse"
        codename="$tempcodename"
    # There is no bullseye repo yet for mongo so just use Buster on Debian 11
    elif [ "$osname" == "debian" ] && [ "$relno" -eq 10 ]; then
        mongodb_repo="deb [arch=amd64] https://repo.mongodb.org/apt/$osname $codename/mongodb-org/4.4 main"
    elif [ "$osname" == "debian" ] && [ "$relno" -eq 11 ]; then
        codename="buster"
        mongodb_repo="deb [arch=amd64] https://repo.mongodb.org/apt/$osname $codename/mongodb-org/4.4 main"
        codename="$tempcodename"
    fi

    nginx_repo="deb https://nginx.org/packages/$osname/ $codename nginx"
    nginx_src_repo="deb-src https://nginx.org/packages/$osname/ $codename nginx"

    postgresql_repo="deb [arch=amd64] https://apt.postgresql.org/pub/repos/apt/ $codename-pgdg main"
}

# Install MongoDB
installMongo()
{
    if [ "$1" != "devinstall" ]; then
        wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/mongo.gpg > /dev/null 2>&1 | tee -a "${currentlog}"
        echo "$mongodb_repo" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list 2>&1 | tee -a "${currentlog}"
        sudo apt-get update && sudo apt-get install -y mongodb-org 2>&1 | tee -a "${currentlog}"
        sudo systemctl enable mongod 2>&1 | tee -a "${currentlog}"
        sudo systemctl restart mongod 2>&1 | tee -a "${currentlog}"
        sleep 5
    fi
}

# Install NodeJS
installNodeJS()
{
    if [ "$1" != "devinstall" ]; then
        if [ "$1" == "update" ]; then
            CURRENT_NODE_VER=$(node --version | cut -d "v" -f2 | cut -d "." -f1)
            if [ "$CURRENT_NODE_VER" != "$NODE_MAJOR_VER" ]; then
                echo -e "\n${GREEN} Updating NodeJS to v${NODE_MAJOR_VER}... ${NC}\n" | tee -a "${currentlog}"
                rm -rf /rmm/web/node_modules 2>&1 | tee -a "${currentlog}"
                sudo systemctl stop meshcentral 2>&1 | tee -a "${currentlog}"
                sudo apt remove -y nodejs 2>&1 | tee -a "${currentlog}"
                sudo rm -rf /usr/lib/node_modules 2>&1 | tee -a "${currentlog}"
            else
                echo -e "\n${GREEN} NodeJS up to date. ${NC}\n" | tee -a "${currentlog}"
                return
            fi
        fi
        curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash - 2>&1 | tee -a "${currentlog}"
        sudo apt-get update && sudo apt-get install -y nodejs 2>&1 | tee -a "${currentlog}"
        sudo npm install -g npm 2>&1 | tee -a "${currentlog}"
        if [ "$1" == "update" ]; then
            sudo chown "${USER}:${USER}" -R /meshcentral 2>&1 | tee -a "${currentlog}"
            cd /meshcentral
            rm -rf node_modules/ 2>&1 | tee -a "${currentlog}"
            npm install meshcentral@"${LATEST_MESH_VER}" 2>&1 | tee -a "${currentlog}"
            sudo systemctl start meshcentral 2>&1 | tee -a "${currentlog}"
        fi
    fi
}

# Install Redis
installRedis()
{
    sudo apt-get install -y redis 2>&1 | tee -a "${currentlog}"
}

# Install Python
installPython()
{
    if [ "$1" == "update" ]; then
        CURRENT_PY=$(python3.10 --version | cut -d " " -f2)
        if [ "$CURRENT_PY" != "$PYTHON_VER" ]; then
            echo -e "\n${GREEN} Updating to ${PYTHON_VER}... ${NC}\n" | tee -a "${currentlog}"
        elif [ "$CURRENT_PY" == "$PYTHON_VER" ]; then
            echo -e "\n${GREEN} Python is up to date. ${NC}\n" | tee -a "${currentlog}"
            return
        fi
    fi

    if [ "$1" == "devinstall" ]; then
        echo -e "\n${GREEN} Python already installed. ${NC}\n" | tee -a "${currentlog}"
        return
    else
        numprocs=$(nproc)
        cd ~
        wget https://www.python.org/ftp/python/"${PYTHON_VER}"/Python-"${PYTHON_VER}".tgz 2>&1 | tee -a "${currentlog}"
        tar -xf Python-"${PYTHON_VER}".tgz 2>&1 | tee -a "${currentlog}"
        cd Python-"${PYTHON_VER}"
        ./configure --enable-optimizations 2>&1 | tee -a "${currentlog}"
        make -j "$numprocs" 2>&1 | tee -a "${currentlog}"
        sudo make altinstall 2>&1 | tee -a "${currentlog}"
        cd ~
        sudo rm -rf Python-"${PYTHON_VER}" Python-"${PYTHON_VER}".tgz 2>&1 | tee -a "${currentlog}"
        if [ "$1" == "devprep" ]; then
            # 02-MiscFunctions
            echo -e "\n${GREEN} All Prereqs installed. ${NC}\n" | tee -a "${currentlog}"
            exit
        fi
    fi
}

# Install Postgresql
installPostgresql()
{
    echo "$postgresql_repo" | sudo tee /etc/apt/sources.list.d/pgdg.list 2>&1 | tee -a "${currentlog}"
    wget -qO - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/postgresql.gpg > /dev/null 2>&1 | tee -a "${currentlog}"
    sudo apt-get update && sudo apt-get install -y postgresql-14 2>&1 | tee -a "${currentlog}"
    sleep 2
    sudo systemctl enable postgresql 2>&1 | tee -a "${currentlog}"
    sudo systemctl restart postgresql 2>&1 | tee -a "${currentlog}"
    sleep 5
}

# Install NATS
installNats()
{
    if [ "$1" == "update" ]; then
        HAS_LATEST_NATS=$(/usr/local/bin/nats-server -version | cut -d " " -f2 | cut -d "v" -f2)
        if [ "$HAS_LATEST_NATS" != "${NATS_SERVER_VER}" ]; then
            echo -e "\n${GREEN} Updating nats to v${NATS_SERVER_VER}... ${NC}\n" | tee -a "${currentlog}"
        else
            echo -e "\n${GREEN} Nats is up to date. ${NC}\n" | tee -a "${currentlog}"
            return
        fi
    fi
    if [ "$1" == "install" ] || [ "$1" == "devinstall" ] || [ "$1" == "restore" ]; then
        NATS_SERVER_VER=$(grep "^NATS_SERVER_VER" "$SETTINGS_FILE" | awk -F'[= "]' '{print $5}')
    fi
    nats_tmp=$(mktemp -d -t nats-XXXXXXXXXX)
    wget -q https://github.com/nats-io/nats-server/releases/download/v"${NATS_SERVER_VER}"/nats-server-v"${NATS_SERVER_VER}"-linux-amd64.tar.gz -P "${nats_tmp}" 2>&1 | tee -a "${currentlog}"
    tar -xzf "${nats_tmp}"/nats-server-v"${NATS_SERVER_VER}"-linux-amd64.tar.gz -C "${nats_tmp}" 2>&1 | tee -a "${currentlog}"
    if [ "$1" == "update" ]; then
        sudo rm -f /usr/local/bin/nats-server 2>&1 | tee -a "${currentlog}"
    fi
    sudo mv "${nats_tmp}"/nats-server-v"${NATS_SERVER_VER}"-linux-amd64/nats-server /usr/local/bin/ 2>&1 | tee -a "${currentlog}"
    sudo chmod +x /usr/local/bin/nats-server 2>&1 | tee -a "${currentlog}"
    sudo chown "${USER}:${USER}" /usr/local/bin/nats-server 2>&1 | tee -a "${currentlog}"
    rm -rf "${nats_tmp}" 2>&1 | tee -a "${currentlog}"
}

# Install frontend
installFrontEnd()
{
    if [ "$1" == "update" ]; then
        if [ -d /rmm/web ]; then
            sudo rm -rf /rmm/web 2>&1 | tee -a "${currentlog}"
        fi
        if [ -d /var/www/rmm/dist ]; then
            sudo rm -rf /var/www/rmm/dist 2>&1 | tee -a "${currentlog}"
        fi
    fi
    
    webtar="trmm-web-v${WEB_VERSION}.tar.gz"
    wget -q https://github.com/amidaware/tacticalrmm-web/releases/download/v"${WEB_VERSION}"/"${webtar}" -O /tmp/"${webtar}" 2>&1 | tee -a "${currentlog}"

    if [ ! -d /var/www/rmm ]; then
        sudo mkdir -p /var/www/rmm 2>&1 | tee -a "${currentlog}"
    fi

    sudo tar -xzf /tmp/"${webtar}" -C /var/www/rmm 2>&1 | tee -a "${currentlog}"
    echo "window._env_ = {PROD_URL: \"https://${rmmdomain}\"}" | sudo tee /var/www/rmm/dist/env-config.js > /dev/null 2>&1 | tee -a "${currentlog}"
    sudo chown www-data:www-data -R /var/www/rmm/dist 2>&1 | tee -a "${currentlog}"
    rm -f /tmp/"${webtar}" 2>&1 | tee -a "${currentlog}"
}

# Install Nginx
installNginx()
{
    if [ "$1" != "devinstall" ]; then
        if [ "$1" == "install" ] || [ "$1" == "devprep" ]; then
            wget -qO - https://nginx.org/packages/keys/nginx_signing.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/nginx.gpg > /dev/null 2>&1 | tee -a "${currentlog}"
            echo "$nginx_repo" | sudo tee /etc/apt/sources.list.d/nginx.list 2>&1 | tee -a "${currentlog}"
            echo "$nginx_src_repo" | sudo tee -a /etc/apt/sources.list.d/nginx.list 2>&1 | tee -a "${currentlog}"
            sudo apt-get update 2>&1 | tee -a "${currentlog}"
            sudo apt-get install -y nginx 2>&1 | tee -a "${currentlog}"
            sudo systemctl stop nginx 2>&1 | tee -a "${currentlog}"
            sudo mkdir -p /etc/nginx/sites-available 2>&1 | tee -a "${currentlog}"
            sudo mkdir -p /etc/nginx/sites-enabled 2>&1 | tee -a "${currentlog}"
        elif [ "$1" == "updatepart1" ]; then
            sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak-"$rundate" 2>&1 | tee -a "${currentlog}"
            sudo cp /etc/nginx/sites-available/rmm.conf /etc/nginx/sites-available/rmm.conf.bak-"$rundate" 2>&1 | tee -a "${currentlog}"
            sudo cp /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-available/meshcentral.conf.bak-"$rundate" 2>&1 | tee -a "${currentlog}"
            sudo cp /etc/nginx/sites-available/frontend.conf /etc/nginx/sites-available/frontend.conf.bak-"$rundate" 2>&1 | tee -a "${currentlog}"
            if [ ! -f /etc/apt/trusted.gpg.d/nginx.gpg ]; then
                wget -qO - https://nginx.org/packages/keys/nginx_signing.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/nginx.gpg > /dev/null 2>&1 | tee -a "${currentlog}"
            fi
            if [ ! -f /etc/apt/sources.list.d/nginx.list ]; then
                echo "$nginx_repo" | sudo tee /etc/apt/sources.list.d/nginx.list 2>&1 | tee -a "${currentlog}"
                echo "$nginx_src_repo" | sudo tee -a /etc/apt/sources.list.d/nginx.list 2>&1 | tee -a "${currentlog}"
                sudo apt-get update 2>&1 | tee -a "${currentlog}"
                sudo rm -f /etc/nginx/modules-enabled/*.conf 2>&1 | tee -a "${currentlog}"
                sudo apt-get install -y nginx 2>&1 | tee -a "${currentlog}"
                sudo apt-get -y --fix-broken install 2>&1 | tee -a "${currentlog}"
            fi
            sudo apt-get -y upgrade 2>&1 | tee -a "${currentlog}"
            sudo systemctl stop nginx 2>&1 | tee -a "${currentlog}"
            sudo cp /rmm/default-configs/nginx/nginx.conf /etc/nginx/nginx.conf 2>&1 | tee -a "${currentlog}"
        elif [ "$1" == "updatepart2" ]; then
            # Check Nginx config
            if ! sudo nginx -t > /dev/null 2>&1; then
                sudo nginx -t 2>&1 | tee -a "${currentlog}"
                echo -e "\n${RED} You have syntax errors in your nginx configs. See errors above. Please fix them and re-run this script. ${NC}\n" | tee -a "${currentlog}"
                echo -e "\n${RED} Aborting... ${NC}\n" | tee -a "${currentlog}"
                exit 1
            fi
        elif [ "$1" == "restore" ]; then
            wget -qO - https://nginx.org/packages/keys/nginx_signing.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/nginx.gpg > /dev/null 2>&1 | tee -a "${currentlog}"
            echo "$nginx_repo" | sudo tee /etc/apt/sources.list.d/nginx.list 2>&1 | tee -a "${currentlog}"
            echo "$nginx_src_repo" | sudo tee -a /etc/apt/sources.list.d/nginx.list 2>&1 | tee -a "${currentlog}"
            sudo apt-get update 2>&1 | tee -a "${currentlog}"
            sudo apt-get install -y nginx 2>&1 | tee -a "${currentlog}"
            sudo systemctl stop nginx 2>&1 | tee -a "${currentlog}"
            sudo rm -rf /etc/nginx 2>&1 | tee -a "${currentlog}"
            sudo mkdir /etc/nginx 2>&1 | tee -a "${currentlog}"
            sudo tar -xzf "$tmp_dir"/nginx/etc-nginx.tar.gz -C /etc/nginx 2>&1 | tee -a "${currentlog}"
            sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak-"$rundate" 2>&1 | tee -a "${currentlog}"
            sudo cp /etc/nginx/sites-available/rmm.conf /etc/nginx/sites-available/rmm.conf.bak-"$rundate" 2>&1 | tee -a "${currentlog}"
            sudo cp /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-available/meshcentral.conf.bak-"$rundate" 2>&1 | tee -a "${currentlog}"
            sudo cp /etc/nginx/sites-available/frontend.conf /etc/nginx/sites-available/frontend.conf.bak-"$rundate" 2>&1 | tee -a "${currentlog}"
            sudo cp /rmm/default-configs/nginx/nginx.conf /etc/nginx/nginx.conf 2>&1 | tee -a "${currentlog}"
            # 02-MiscFunctions
            getExistingDomainInfo;
        fi
    fi
}

# Install NATS Api
installNatsApi()
{
    sudo cp /rmm/natsapi/bin/nats-api /usr/local/bin 2>&1 | tee -a "${currentlog}"
    sudo chown "${USER}:${USER}" /usr/local/bin/nats-api 2>&1 | tee -a "${currentlog}"
    sudo chmod +x /usr/local/bin/nats-api 2>&1 | tee -a "${currentlog}"
}

# Install MeshCentral
installMeshCentral()
{
    MESH_VER=$(grep "^MESH_VER" "$SETTINGS_FILE" | awk -F'[= "]' '{print $5}')

    if [ "$1" == "install" ] || [ "$1" == "devinstall" ]; then
        sudo mkdir -p /meshcentral/meshcentral-data 2>&1 | tee -a "${currentlog}"
    elif [ "$1" == "restore" ]; then
        sudo tar -xzf "$tmp_dir"/meshcentral/mesh.tar.gz -C / 2>&1 | tee -a "${currentlog}"
    fi
    sudo chown "${USER}:${USER}" -R /meshcentral 2>&1 | tee -a "${currentlog}"
    cd /meshcentral
    npm install meshcentral@"${MESH_VER}" 2>&1 | tee -a "${currentlog}"
    sudo chown "${USER}:${USER}" -R /meshcentral 2>&1 | tee -a "${currentlog}"
}

# Install fail2ban
installFail2ban()
{
    sudo apt-get install -y fail2ban 2>&1 | tee -a "${currentlog}"

    # Copy default jail config to create override config
    sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo truncate -s 0 /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"

    # Write default jail config override
    sudo chmod 777 /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
	sudo printf '[DEFAULT]' >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
	sudo printf "\nignoreip = 127.0.0.1/8" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
	sudo printf "\n\n" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf '[sshd]' >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
	sudo printf "\nenabled = true" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
	sudo printf "\nport    = ssh" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
	sudo printf "\n\n" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf '[nginx-http-auth]' >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf "\nenabled = true" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf "\n\n" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf '[nginx-botsearch]' >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf "\nenabled = true" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf "\n\n" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf '[tacticalrmm]' >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf "\nenabled = true" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf "\nport = http,https" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf "\nfilter = tacticalrmm" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf "\n" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf 'action = iptables-allports[name=tactical]' >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf "\n" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf 'logpath = /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log' >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf "\nmaxretry = 5" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf "\nbantime = 3600" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf "\nfindtime = 3600" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf "\n\n" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
    sudo printf '[recidive]' >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
	sudo printf "\nenabled = true" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
	sudo printf "\nbantime = 31536000 ; 1 year" >> /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"
	sudo chmod 644 /etc/fail2ban/jail.local 2>&1 | tee -a "${currentlog}"

    # Copy default app config to create override config
    sudo cp /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local 2>&1 | tee -a "${currentlog}"
	sudo truncate -s 0 /etc/fail2ban/fail2ban.local 2>&1 | tee -a "${currentlog}"

    # Write default app config override
	sudo chmod 777 /etc/fail2ban/fail2ban.local 2>&1 | tee -a "${currentlog}"
	sudo printf '[Definition]' >> /etc/fail2ban/fail2ban.local 2>&1 | tee -a "${currentlog}"
	sudo printf "\ndbpurgeage = 31579200" >> /etc/fail2ban/fail2ban.local 2>&1 | tee -a "${currentlog}"
	sudo printf "\nloglevel = INFO" >> /etc/fail2ban/fail2ban.local 2>&1 | tee -a "${currentlog}"
	sudo chmod 644 /etc/fail2ban/fail2ban.local 2>&1 | tee -a "${currentlog}"

    # Add T-RMM definition
    sudo echo '[Definition]' | sudo tee /etc/fail2ban/filter.d/tacticalrmm.conf 2>&1 | tee -a "${currentlog}"
    sudo chmod 777 /etc/fail2ban/filter.d/tacticalrmm.conf 2>&1 | tee -a "${currentlog}"
	sudo printf "\n" >> /etc/fail2ban/filter.d/tacticalrmm.conf 2>&1 | tee -a "${currentlog}"
    sudo printf 'failregex = ^<HOST>.*400.17.*$' >> /etc/fail2ban/filter.d/tacticalrmm.conf 2>&1 | tee -a "${currentlog}"
	sudo printf "\n" >> /etc/fail2ban/filter.d/tacticalrmm.conf 2>&1 | tee -a "${currentlog}"
    sudo printf 'ignoreregex = ^<HOST>.*200.*$' >> /etc/fail2ban/filter.d/tacticalrmm.conf 2>&1 | tee -a "${currentlog}"
	sudo chmod 644 /etc/fail2ban/filter.d/tacticalrmm.conf 2>&1 | tee -a "${currentlog}"

    # Restart Fail2ban
    sudo systemctl restart fail2ban 2>&1 | tee -a "${currentlog}"
}
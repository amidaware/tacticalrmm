###################
#  CFG file info  #
###################

CFG_VERSION="8"


######################################################################################
#  Misc Functions, must be before any functions except input verification functions  #
######################################################################################

# Set bash text colors
setColors()
{
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    RED='\033[0;31m'
    NC='\033[0m'
}

# Clear screen
cls()
{
    printf "\033c"
}

# Purdy install text in green
print_green()
{
    printf >&2 "${GREEN}%0.s-${NC}" {1..80}
    printf >&2 "\n"
    printf >&2 "${GREEN}${1}${NC}\n"
    printf >&2 "${GREEN}%0.s-${NC}" {1..80}
    printf >&2 "\n"
}

# Purdy install text in red
print_red()
{
    printf >&2 "${RED}%0.s-${NC}" {1..80}
    printf >&2 "\n"
    printf >&2 "${RED}${1}${NC}\n"
    printf >&2 "${RED}%0.s-${NC}" {1..80}
    printf >&2 "\n"
}

# Purdy install text in yellow
print_yellow()
{
    printf >&2 "${YELLOW}%0.s-${NC}" {1..80}
    printf >&2 "\n"
    printf >&2 "${YELLOW}${1}${NC}\n"
    printf >&2 "${YELLOW}%0.s-${NC}" {1..80}
    printf >&2 "\n"
}

# Command-line help function
helpText()
{
    echo -e ""
    echo -e 'Syntax: ./installer-util.sh [-i|a|b|c|e|d|m|f|h|k|s|p|r|o|t|u|n|w]'
    echo -e ""
    echo -e "Options:\n"
    echo -e "i          Select type of automated function. Options are ${YELLOW}install${NC},${YELLOW} devprep${NC},${YELLOW} devinstall${NC},${YELLOW} backup${NC}, or ${YELLOW}restore${NC}.\n"
    echo -e "a          Provide the api hostname/subdomain, eg ${YELLOW}api${NC}.example.com\n"
    echo -e "b          If performing a dev install, this will select the branch. eg, https://github.com/amidaware/tacticalrmm/${YELLOW}branch${NC}/.git\n" 
    echo -e "c          Full path to SSL CA Chain certificate for import. Must be in .pem format. Include the filename.\n"
    echo -e "e          Full path to SSL certificate for import. Must be in .pem format. Include the filename.\n"
    echo -e "d          Provide the root domain, eg rmm.${YELLOW}example.com${NC}\n"
    echo -e "m          Provide a valid email address for LetsEncrypt cert generation and primary T-RMM user.\n"
    echo -e "f          Provide the full path to the backup file, including file name.\n"
    echo -e "h          Type ${YELLOW}help${NC} to show this help text.\n"
    echo -e "k          Full path to SSL private key for import. Must be in .pem format. Include the filename.\n"
    echo -e "s          Provide the mesh hostname/subdomain, eg ${YELLOW}mesh${NC}.example.com\n"
    echo -e "p          Provide the password for the initial T-RMM user.\n"
    echo -e "r          If performing a dev install, this will select the repo owner. eg, https://github.com/${YELLOW}repo-owner${NC}/tacticalrmm/master/.git\n"
    echo -e "o          Provide the rmm hostname/subdomain, eg ${YELLOW}rmm${NC}.example.com\n"
    echo -e "t          Enter ${YELLOW}trouble${NC} to perform troubleshooting functions.\n"
    echo -e "u          Select update type. Options are ${YELLOW}standard${NC} or ${YELLOW}forced${NC}.\n"
    echo -e "n          Provide the username for the initial T-RMM user.\n"
    echo -e "w          Select certificate install type. Options are ${YELLOW}import${NC} or ${YELLOW}webroot${NC}.\n""
}

# Check for new script version
checkScriptVer()
{
    # create temp file and download current script to use for comparison
    TMP_FILE=$(mktemp -p "" "rmminstall_XXXXXXXXXX")
    curl -s -L "$2" > ${TMP_FILE}
    NEW_VER=$(grep "^SCRIPT_VERSION" "$TMP_FILE" | awk -F'[="]' '{print $3}')
    
    # download new file if available 
    if [ "$1" -ne "${NEW_VER}" ]; then
        wget -q "$2" -O "$3"
        if [ "$autoinstall" == "1" ]; then
            echo -e "${RED} Error:${NC}\n"
            echo -e "${RED} Old $3 detected.${NC}\n"
            echo -e "${RED} The latest version has been downloaded.${NC}\n"
            echo -e "${RED} Please re-run $3${NC}\n"
            echo -e "${RED} Exiting.${NC}\n"
        else
            dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "Old $3 detected.\nThe latest version has been downloaded.\n\nPlease re-run $3" 10 40
            clear -x
        fi
        rm -f $TMP_FILE
        exit 1
    fi

    rm -f $TMP_FILE
}

# Check for functions updates
checkCfgVer()
{
    local currentcfgver=$(grep "^CFG_VERSION" "$PWD/script-cfg/$2" | awk -F'[="]' '{print $3}')

    # create temp file and download current file to use for comparison
    TMP_FILE=$(mktemp -p "" "rmminstall_XXXXXXXXXX")
    curl -s -L "$1/script-cfg/$2" > ${TMP_FILE}
    NEW_VER=$(grep "^CFG_VERSION" "$TMP_FILE" | awk -F'[="]' '{print $3}')

    # download new file if available
    if [ "$currentcfgver" -ne "${NEW_VER}" ]; then
        wget -q "$1/script-cfg/$2" -O "$PWD/script-cfg/$2"
        if [ "$autoinstall" == "1" ]; then
            echo -e "${RED} Error:${NC}\n"
            echo -e "${RED} Old $2 detected.${NC}\n"
            echo -e "${RED} The latest version has been downloaded.${NC}\n"
            echo -e "${RED} Please re-run $3${NC}\n"
            echo -e "${RED} Exiting.${NC}\n"
        else
            dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "Old $2 file detected.\nThe latest version has been downloaded.\n\nPlease re-run $3" 10 40
            clear -x
        fi
        rm -f $TMP_FILE
        exit 1
    fi

    rm -f $TMP_FILE
}

# Check for root as user
checkRoot()
{
    # if user is root, exit
    if [ $EUID -eq 0 ]; then
        if [ "$autoinstall" == "1" ]; then
            echo -e "${RED} Error:${NC}\n"
            echo -e "${RED} Do NOT run this script as root.${NC}\n"
            echo -e "${RED} Exiting.${NC}\n"
        else
            dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "Do NOT run this script as root. Exiting." 0 0
            clear -x
        fi
        exit 1
    fi
}

# Check if Tactical user exists, if not prompt to create it
checkTacticalUser()
{
    local tacticaluser=""
    local hassudo=""
    local tacpass=""

    # Check if dir exists, if so pull tactical user
    if [ -d /rmm ]; then
        tacticaluser=$(stat -c '%U' /rmm)
        if [ "$tacticaluser" != "${USER}" ]; then
            if [ "$autoinstall" == "1" ]; then
                echo -e "${RED} Error:${NC}\n"
                echo -e "${RED} This script must be run as the Tactical user.${NC}\n"
                echo -e "${RED} Please switch users, and run it again.${NC}\n"
                echo -e "${RED} Exiting.${NC}\n"
            else
                dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "This script must be run as the Tactical user.\nPlease switch users, and try again.\n\nExiting." 0 0
                clear -x
            fi
            exit 1
        fi
    
    # If user not tactical, check if it exists. If so, exit. If not, create it
    elif [ "${USER}" != "tactical" ]; then
        tacticaluser="$(id -u tactical > /dev/null 2>&1; echo $?)"
        case $tacticaluser in
            0 ) if [ "$autoinstall" == "1" ]; then
                    echo -e "${RED} Error:${NC}\n"
                    echo -e "${RED} This script must be run as the Tactical user.${NC}\n"
                    echo -e "${RED} Please switch users, and run it again.${NC}\n"
                    echo -e "${RED} Exiting.${NC}\n"
                else
                    dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "This script must be run as the Tactical user.\nPlease switch users, and try again.\n\nExiting." 0 0
                    clear -x
                fi
                exit 1;;

            1 ) print_yellow 'Tactical user does not exist. Creating now.'
                sudo useradd -m -G sudo -s /bin/bash tactical
                tacpass="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1)"
                echo "tactical:$tacpass"| sudo chpasswd
                if [ "$autoinstall" == "1" ]; then
                    echo -e "${RED} The Tactical user has been created.${NC}\n"
                    echo -e "${RED} Username: tactical${NC}"
                    echo -e "${RED} Password: $tacpass${NC}\n"
                    echo -e "${RED} Please switch users, re-download the script, and run it again.${NC}\n"
                    echo -e "${RED} Exiting.${NC}\n"
                else
                    dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Tactical User Created" --msgbox "The Tactical user has been created.\n\nUsername: tactical\n\nPassword: $tacpass\n\nPlease switch users, re-download the script, and try again.\n\nExiting." 0 0
                    clear -x
                fi
                exit 1;;
        esac

    # If user is tactical, verify sudo privileges. If none, add to sudo group
    elif [ "${USER}" == "tactical" ]; then
        hassudo="$(id -nG tactical | grep -w 'sudo' > /dev/null 2>&1; echo $?)"
        case $hassudo in
            0 ) return;;

            1 ) print_green 'Adding Tactical user to sudo group.'
                sudo usermod -a -G sudo tactical
                if [ "$autoinstall" == "1" ]; then
                    echo -e "${RED} The Tactical user has been added to the sudo group.${NC}\n"
                    echo -e "${RED} Please log out of the tactical user, log back in, and try again.${NC}\n"
                    echo -e "${RED} Exiting.${NC}\n"
                else
                    dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Tactical User Sudo Privileges Added" --msgbox "The Tactical user has been added to the sudo group.\nPlease log out of the tactical user, log back in, and try again.\n\nExiting." 0 0
                    clear -x
                fi
                exit 1;;
        esac    
    fi
}       

# Clone primary repo
clonePrimaryRepo()
{
    # use only if called from standard or dev install, or restore
    if [ "$1" == "install" ] || [ "$1" == "devinstall" ] || [ "$1" == "restore" ]; then
        sudo mkdir /rmm
        sudo chown "${USER}:${USER}" /rmm
        sudo mkdir -p /var/log/celery
        sudo chown "${USER}:${USER}" /var/log/celery
        git clone "$2" /rmm/
    fi

    cd /rmm
    git config user.email "admin@example.com"
    git config user.name "Bob"

    # use only if called from standard or dev install, or restore
    if [ "$1" == "install" ] || [ "$1" == "devinstall" ] || [ "$1" == "restore" ]; then
        git checkout "$3"

    # use only if called from update
    elif [ "$1" == "update" ]; then
        git fetch
        git checkout "$3"
        git reset --hard FETCH_HEAD
        git clean -df
        git pull
    fi
}

# Clone scripts repo
cloneScriptsRepo()
{
    # if directory exists, skip, else create it
    if [ ! -d "${SCRIPTS_DIR}" ]; then
        sudo mkdir -p "${SCRIPTS_DIR}"
        sudo chown "${USER}:${USER}" "${SCRIPTS_DIR}"
        git clone "$2" "${SCRIPTS_DIR}"/
    fi    
    cd "${SCRIPTS_DIR}"
    git config user.email "admin@example.com"
    git config user.name "Bob"

    # use only if called from standard or dev install, or restore
    if [ "$1" == "install" ] || [ "$1" == "devinstall" ] || [ "$1" == "restore" ]; then
        git checkout main
    
    # use only if called from update
    elif [ "$1" == "update" ]; then
        git fetch
        git checkout main
        git reset --hard FETCH_HEAD
        git clean -df
        git pull
    fi
}

# Verify repo exists
verifyRepoExists()
{
    local repostatus=$(curl --output /dev/null --silent --write-out "%{http_code}" "$1")
    if [ "$repostatus" == "200" ]; then
        echo -e "${GREEN} Repo exists.${NC}\n"
    else
        echo -e "${RED} The Tactical RMM repository you entered does not exist.${NC}\n"
        echo -e "${RED} Please try again.${NC}\n"
        echo -e "${RED} Exiting...${NC}\n"
        exit 1
    fi
}

# Set primary repos to use
decideMainRepos()
{
    userconfirm="n"
    local own=""
    local bran=""
    local repostatus=""
    local goodrepo="n"

    until [ "$goodrepo" == "y" ]; do
        # prompt for repo owner info and verify before proceeding
        until [ "$userconfirm" == "y" ]; do
            own=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Select Repository" --inputbox "Enter the dev repo owner name.\nThis is right after github.com in the URL:" 10 90 3>&1 1>&2 2>&3)
            own="$(translateToLowerCase $own)"
            dialog --cr-wrap --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Select Repository" --yesno "Is this correct?\n$own" 0 0
            case $? in
                0 ) userconfirm="y"
                    clear -x;;
                1 ) userconfirm="n"
                    derpDerp;;
            esac
        done
        userconfirm="n"
        REPO_OWNER="$own"

        # prompt for branch info and verify before proceeding
        until [ "$userconfirm" == "y" ]; do
            bran=$(dialog --cr-wrap --no-cancel --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Select Repository Branch" --inputbox "Enter the dev repo branch name.\nThis is right after tacticalrmm in the URL:" 10 90 3>&1 1>&2 2>&3)
            bran="$(translateToLowerCase $bran)"
            dialog --cr-wrap --clear --backtitle "Tactical RMM Installation and Maintenance Utility" --title "Select Repository Branch" --yesno "Is this correct?\n$bran" 0 0
            case $? in
                0 ) userconfirm="y"
                    clear -x;;
                1 ) userconfirm="n"
                    derpDerp;;
            esac
        done
        userconfirm="n"
        BRANCH="$bran"
    
        repostatus=$(curl --output /dev/null --silent --write-out "%{http_code}" "$SCRIPT_URL")
        if [ "$repostatus" == "200" ]; then
            goodrepo="y"
        else
            goodrepo="n"
            derpDerp;
            dialog --keep-tite --cr-wrap --backtitle "Tactical RMM Installation and Maintenance Utility" --title "ERROR" --msgbox "The Tactical RMM repository you entered does not exist.\n\nPlease try again." 0 0
        fi
    done

    # Check for new functions versions, include url, filename, and script name as variables
    for i in "${cfgfiles[@]}"
    do
	    checkCfgVer "$CFG_URL" "$i" "$THIS_SCRIPT";
    done
    # Check for new script version, pass script version, url, and script name variables in that order
    checkScriptVer "$SCRIPT_VERSION" "$SCRIPT_URL" "$THIS_SCRIPT";
}

# Pull domain info from existing installation
getExistingDomainInfo()
{
    rmmdomain=$(grep server_name /etc/nginx/sites-available/rmm.conf | grep -v 301 | head -1 | tr -d " \t" | sed 's/.*server_name//' | tr -d ';')
    frontenddomain=$(grep server_name /etc/nginx/sites-available/frontend.conf | grep -v 301 | head -1 | tr -d " \t" | sed 's/.*server_name//' | tr -d ';')
    meshdomain=$(grep server_name /etc/nginx/sites-available/meshcentral.conf | grep -v 301 | head -1 | tr -d " \t" | sed 's/.*server_name//' | tr -d ';')
    rmmhost=$(echo "$rmmdomain" | cut -d '.' -f1)
    frontendhost=$(echo "$frontenddomain" | cut -d '.' -f1)
    meshhost=$(echo "$meshdomain" | cut -d '.' -f1)
    rootdomain=$(echo "$rmmdomain" | cut -d '.' -f2-)
}
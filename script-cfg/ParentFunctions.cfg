###################
#  CFG file info  #
###################

CFG_VERSION="8"


######################
#  Parent Functions  #
######################

# Main install function
mainInstall()
{
    # Set log file
    currentlog="${installlog}"

    # Repo info for Postegres and Mongo
    # InstallFunctions
    setInstallRepos;

    # Create usernames and passwords
    # User Input
    generateUsersAndPass "$INSTALL_TYPE";

    # Clear screen
    clear -x

    # Get host/domain info
    # User Input
    getHostAndDomainInfo;

    # Configure hosts file
    # Misc functions
    echo -e "\n${GREEN} Configuring Hosts file... ${NC}\n" | tee -a "${currentlog}"
    # Network functions
    configHosts "$INSTALL_TYPE";

    # Certificate generation
    # Misc functions
    echo -e "\n${GREEN} Installing Certbot... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installCertbot "$INSTALL_TYPE";

    # Install Nginx
    # Misc functions
    echo -e "\n${GREEN} Installing Nginx... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installNginx "$INSTALL_TYPE";

    # Install NodeJS
    # Misc functions
    echo -e "\n${GREEN} Installing NodeJS... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installNodeJS "$INSTALL_TYPE";

    # Install and enable MongoDB
    # Misc functions
    echo -e "\n${GREEN} Installing MongoDB... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installMongo "$INSTALL_TYPE";

    # Install Python
    # Misc functions
    echo -e "\n${GREEN} Installing Python ${PYTHON_VER}... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installPython "$INSTALL_TYPE";

    # Installing Redis
    # Misc functions
    echo -e "\n${GREEN} Installing redis... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installRedis;

    # Install and enable Postgresql
    # Misc functions
    echo -e "\n${GREEN} Installing postgresql... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installPostgresql;

    # Postgres DB creation
    # Misc functions
    echo -e "\n${GREEN} Creating database for the rmm... ${NC}\n" | tee -a "${currentlog}"
    # Database functions
    createPGDB;

    # Clone main repo
    # Misc functions
    echo -e "\n${GREEN} Cloning primary repo... ${NC}\n" | tee -a "${currentlog}"
    # Misc functions
    clonePrimaryRepo "$INSTALL_TYPE" "$REPO_URL" "$BRANCH";
  
    # Clone scripts repo
    # Misc functions
    echo -e "\n${GREEN} Cloning community scripts repo... ${NC}\n" | tee -a "${currentlog}"
    # Misc functions
    cloneScriptsRepo "$INSTALL_TYPE" "$SCRIPTS_REPO_URL";

    # Installing NATS
    # Misc functions
    echo -e "\n${GREEN} Installing NATS... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installNats "$INSTALL_TYPE";

    # Install MeshCentral
    # Misc functions
    echo -e "\n${GREEN} Installing MeshCentral... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installMeshCentral "$INSTALL_TYPE";
  
    # Create MeshCentral config
    # Misc functions
    echo -e "\n${GREEN} Generating MeshCentral Config... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createMeshConfig;

    # Create local settings file
    # Misc functions
    echo -e "\n${GREEN} Generating Local Settings... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createLocalSettings;

    # Install NATS-API and correct permissions
    # Misc functions
    echo -e "\n${GREEN} Installing NATS API... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installNatsApi;

    # Install backend, configure primary admin user, setup admin 2fa
    # Misc functions
    echo -e "\n${GREEN} Installing the backend... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    configureBackend "$INSTALL_TYPE";

    # Create UWSGI config
    # Misc functions
    echo -e "\n${GREEN} Creating UWSGI configuration... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createUwsgiConf;

    # Create RMM UWSGI systemd service
    # Misc functions
    echo -e "\n${GREEN} Creating UWSGI service... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createUwsgiService;

    # Create Daphne systemd service
    # Misc functions
    echo -e "\n${GREEN} Creating Daphne service... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createDaphneService;

    # Create NATS systemd service
    # Misc functions
    echo -e "\n${GREEN} Creating NATS service... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createNatsService;

    # Create NATS-api systemd service
    # Misc functions
    echo -e "\n${GREEN} Creating NATS-API service... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createNatsApiService;

    # Create Backend Nginx site config
    # Misc functions
    echo -e "\n${GREEN} Creating Backend Nginx config... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createBackendNginxConf;

    # Create MeshCentral Nginx configuration
    # Misc functions
    echo -e "\n${GREEN} Creating MeshCentral Nginx config... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createMeshNginxConf;

    # Enable Mesh and RMM sites
    sudo ln -s /etc/nginx/sites-available/rmm.conf /etc/nginx/sites-enabled/rmm.conf 2>&1 | tee -a "${currentlog}"
    sudo ln -s /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-enabled/meshcentral.conf 2>&1 | tee -a "${currentlog}"

    # Create conf directory
    sudo mkdir /etc/conf.d 2>&1 | tee -a "${currentlog}"

    # Create Celery systemd service
    # Misc functions
    echo -e "\n${GREEN} Creating Celery service... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createCeleryService;

    # Configure Celery service
    # Misc functions
    echo -e "\n${GREEN} Creating Celery config... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createCeleryConf;

    # Create CeleryBeat systemd service
    # Misc functions
    echo -e "\n${GREEN} Creating CeleryBeat service... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createCeleryBeatService;

    # Correct conf dir ownership
    sudo chown "${USER}:${USER}" -R /etc/conf.d/ 2>&1 | tee -a "${currentlog}"

    # Create MeshCentral systemd service
    # Misc functions
    echo -e "\n${GREEN} Creating MeshCentral service... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createMeshCentralService;

    # Update services info
    sudo systemctl daemon-reload 2>&1 | tee -a "${currentlog}"

    # Verify and correct permissions
    if [ -d ~/.npm ]; then
        sudo chown -R "${USER}:${GROUP}" ~/.npm 2>&1 | tee -a "${currentlog}"
    fi

    if [ -d ~/.config ]; then
        sudo chown -R "${USER}:${GROUP}" ~/.config 2>&1 | tee -a "${currentlog}"
    fi

    # Install frontend
    # Misc functions
    echo -e "\n${GREEN} Installing the frontend... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installFrontEnd "$INSTALL_TYPE";

    # Set front end Nginx config and enable
    # Misc functions
    echo -e "\n${GREEN} Creating Frontend Nginx config... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createFrontendNginxConf;

    # Enable Frontend site
    sudo ln -s /etc/nginx/sites-available/frontend.conf /etc/nginx/sites-enabled/frontend.conf 2>&1 | tee -a "${currentlog}"

    # Webroot certificate fix
    if [ "$certtype" == "webroot" ]; then
        generateCerts;
    fi

    # Enable RMM, Daphne, Celery, and Nginx services
    # Misc functions
    echo -e "\n${GREEN} Enabling Services... ${NC}\n" | tee -a "${currentlog}"

    for i in rmm.service daphne.service celery.service celerybeat.service nginx
    do
        sudo systemctl enable ${i} 2>&1 | tee -a "${currentlog}"
        sudo systemctl stop ${i} 2>&1 | tee -a "${currentlog}"
        sudo systemctl start ${i} 2>&1 | tee -a "${currentlog}"
    done
    sleep 5

    # Enable MeshCentral service
    # Misc functions
    echo -e "\n${GREEN} Starting meshcentral and waiting for it to install plugins... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    enableMeshService;

    # Generating MeshCentral key
    # Misc functions
    echo -e "\n${GREEN} Generating meshcentral login token key... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    generateMeshToken;

    # Configuring MeshCentral admin user and device group, restart service
    # Misc functions
    echo -e "\n${GREEN} Creating meshcentral account and group... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    configMeshUserGroup;

    # Enable and configure NATS service
    # Misc functions
    echo -e "\n${GREEN} Starting NATS service... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    enableNatsService;

    # Disable django admin
    sed -i 's/ADMIN_ENABLED = True/ADMIN_ENABLED = False/g' /rmm/api/tacticalrmm/tacticalrmm/local_settings.py 2>&1 | tee -a "${currentlog}"

    # Restart core services
    # Misc functions
    echo -e "\n${GREEN} Restarting services... ${NC}\n" | tee -a "${currentlog}"

    for i in rmm.service daphne.service celery.service celerybeat.service
    do
        sudo systemctl stop ${i} 2>&1 | tee -a "${currentlog}"
        sudo systemctl start ${i} 2>&1 | tee -a "${currentlog}"
    done

    # Yay, we're done!
    # Misc functions
    print_yellow "Installation complete!"
    echo -e "\n${YELLOW} Access your rmm at: ${GREEN}https://${frontenddomain}${NC}\n" | tee -a no-peeking.log
    echo -e "${YELLOW} Django admin url (disabled by default): ${GREEN}https://${rmmdomain}/${ADMINURL}/${NC}\n" | tee -a no-peeking.log
    echo -e "${YELLOW} MeshCentral username: ${GREEN}${meshusername}${NC}" | tee -a no-peeking.log
    echo -e "${YELLOW} MeshCentral password: ${GREEN}${MESHPASSWD}${NC}\n" | tee -a no-peeking.log

    sudo chmod 600 "$PWD"/no-peeking.log 2>&1 | tee -a "${currentlog}"

    if [ "$BEHIND_NAT" = true ]; then
        echo -e "\n${YELLOW} Read below if your router does NOT support Hairpin NAT:${NC}\n"
        echo -e "${GREEN} If you will be accessing the web interface of the RMM from the same LAN as this server,\n you'll need to make sure your 3 subdomains resolve to ${IPV4}${NC}\n"
        echo -e "${GREEN} This also applies to any agents that will be on the same local network as the rmm.${NC}\n"
        if [ "$certtype" == "webroot" ]; then
            echo -e "\n${GREEN} You'll also need to setup port forwarding in your router on ports 80 and 443 if you have not done so already.${NC}\n"
        else
            echo -e "\n${GREEN} You'll also need to setup port forwarding in your router on port 443.${NC}\n"
        fi
    fi
    # Misc functions
    print_yellow "Please refer to the github README for next steps."

    return
}

# Update function
updateTRMM()
{
    # Set log file
    currentlog="${updatelog}"

    # Check if user is same as during installation
    # UpdateRestoreFunctions
    checkSameUser "$INSTALL_TYPE";

    # Get current release version and check if update is necessary
    # UpdateRestoreFunctions
    checkIfUpdate;

    # Get current versions of necessary included apps
    # UpdateRestoreFunctions
    checkAdditionalAppsVers;

    # Clear screen
    clear -x

    # Check CHECK_NATS_LIMITNOFILE, whatever that means
    # UpdateRestoreFunctions
    checkNatsLimitNoFile;

    # Check Nginx config
    # InstallFunctions
    installNginx "updatepart1";

    # Stop services
    for i in nginx nats-api nats rmm daphne celery celerybeat
    do
        echo -e "${GREEN} Stopping ${i} service... ${NC}\n" | tee -a "${currentlog}"
        sudo systemctl stop "${i}" 2>&1 | tee -a "${currentlog}"
    done

    # Rebuild uwsgi config
    rm -f /rmm/api/tacticalrmm/app.ini 2>&1 | tee -a "${currentlog}"
    # Config and Service functions
    createUwsgiConf;

    # Check if Python is up to date, if not, update
    # InstallFunctions
    installPython "$INSTALL_TYPE";

    # Check if NATS is up to date, if not, update
    # InstallFunctions
    installNats "$INSTALL_TYPE";

    # This does stuff
    if [ -d ~/.npm ]; then
        sudo rm -rf ~/.npm 2>&1 | tee -a "${currentlog}"
    fi

    if [ -d ~/.cache ]; then
        sudo rm -rf ~/.cache 2>&1 | tee -a "${currentlog}"
    fi

    if [ -d ~/.config ]; then
        sudo chown -R "${USER}:${GROUP}" ~/.config 2>&1 | tee -a "${currentlog}"
    fi

    # Check NodeJS version, update if needed and update MeshCentral
    # Misc functions
    echo -e "\n${GREEN} Updating NodeJS... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installNodeJS "$INSTALL_TYPE";

    # Pull domain info from existing Nginx confs
    # Misc functions
    getExistingDomainInfo;

    # Update from main repo
    # Misc functions
    echo -e "\n${GREEN} Cloning primary repo... ${NC}\n" | tee -a "${currentlog}"
    # Misc functions
    clonePrimaryRepo "$INSTALL_TYPE" "$REPO_URL" "$BRANCH";

    # Update from community-scripts repo
    # Misc functions
    echo -e "\n${GREEN} Cloning community scripts repo... ${NC}\n" | tee -a "${currentlog}"
    # Misc functions
    cloneScriptsRepo "$INSTALL_TYPE" "$SCRIPTS_REPO_URL";

    # Apply updated Ownership and perms
    sudo chown "${USER}:${USER}" -R /rmm 2>&1 | tee -a "${currentlog}"
    sudo chown "${USER}:${USER}" -R "${SCRIPTS_DIR}" 2>&1 | tee -a "${currentlog}"
    sudo chown "${USER}:${USER}" /var/log/celery 2>&1 | tee -a "${currentlog}"
    sudo chown "${USER}:${USER}" -R /etc/conf.d/ 2>&1 | tee -a "${currentlog}"
    sudo chown "root:${USER}" -R /etc/letsencrypt 2>&1 | tee -a "${currentlog}"
    sudo chmod 755 -R /etc/letsencrypt 2>&1 | tee -a "${currentlog}"

    # Check additional Nginx settings and update
    # InstallFunctions
    installNginx "updatepart2";

    # Update Nginx conf files
    # Config and Service functions
    createMeshNginxConf;
    # Config and Service functions
    createFrontendNginxConf;
    # Config and Service functions
    createBackendNginxConf;

    # Reconfigure backend
    # Config and Service functions
    createCeleryConf;
    # Config and Service functions
    configureBackend "$INSTALL_TYPE";

    # Disable Redis append only
    # UpdateRestoreFunctions
    turnOffRedisAppendOnly;

    # Update Frontend
    # InstallFunctions
    installFrontEnd "$INSTALL_TYPE";

    # Start services
    for i in nats nats-api rmm daphne celery celerybeat nginx
    do
        echo -e "${GREEN} Starting ${i} service... ${NC}\n" | tee -a "${currentlog}"
        sudo systemctl start "${i}" 2>&1 | tee -a "${currentlog}"
    done
    sleep 3

    # Push agent updates
    /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py update_agents 2>&1 | tee -a "${currentlog}"

    # Update MeshCentral if necessary
    updateMeshCentral;
    # Config and Service functions
    createMeshConfig;
    # Config and Service functions
    enableMeshService "$INSTALL_TYPE";

    # Cleanup
    rm -f "$TMP_SETTINGS" 2>&1 | tee -a "${currentlog}"

    # Bye-bye
    # Misc functions
    print_green "Update finished!"

    return
}

# Backup Function
backupTRMM()
{
    # Set log file
    currentlog="${backuplog}"

    # Pull Postgres info
    POSTGRES_USER=$(grep -w USER /rmm/api/tacticalrmm/tacticalrmm/local_settings.py | sed 's/^.*: //' | sed 's/.//' | sed -r 's/.{2}$//')
    POSTGRES_PW=$(grep -w PASSWORD /rmm/api/tacticalrmm/tacticalrmm/local_settings.py | sed 's/^.*: //' | sed 's/.//' | sed -r 's/.{2}$//')

    # Check if rmmbackup folder exists, if not create it
    if [ ! -d /rmmbackups ]; then
        sudo mkdir /rmmbackups 2>&1 | tee -a "${currentlog}"
        sudo chown "${USER}:${USER}" /rmmbackups 2>&1 | tee -a "${currentlog}"
    fi

    # Remove old MeshCentral backups
    if [ -d /meshcentral/meshcentral-backup ]; then
        rm -rf /meshcentral/meshcentral-backup/* 2>&1 | tee -a "${currentlog}"
    fi

    # Remove old MeshCentral DB backups
    if [ -d /meshcentral/meshcentral-coredumps ]; then
        rm -f /meshcentral/meshcentral-coredumps/* 2>&1 | tee -a "${currentlog}"
    fi

    # Set info for backup and folders
    dt_now=$(date '+%Y_%m_%d__%H_%M_%S')
    tmp_dir=$(mktemp -d -t tacticalrmm-XXXXXXXXXXXXXXXXXXXXX)
    sysd="/etc/systemd/system"

    # Create temp backup subdirectories
    mkdir -p "$tmp_dir"/meshcentral/mongo 2>&1 | tee -a "${currentlog}"
    mkdir "$tmp_dir"/postgres 2>&1 | tee -a "${currentlog}"
    mkdir "$tmp_dir"/certs 2>&1 | tee -a "${currentlog}"
    mkdir "$tmp_dir"/nginx 2>&1 | tee -a "${currentlog}"
    mkdir "$tmp_dir"/systemd 2>&1 | tee -a "${currentlog}"
    mkdir "$tmp_dir"/rmm 2>&1 | tee -a "${currentlog}"
    mkdir "$tmp_dir"/confd 2>&1 | tee -a "${currentlog}"

    # Dump Postgres database
    pg_dump --dbname=postgresql://"${POSTGRES_USER}":"${POSTGRES_PW}"@127.0.0.1:5432/tacticalrmm | gzip -9 > "$tmp_dir"/postgres/db-"$dt_now".psql.gz 2>&1 | tee -a "${currentlog}"

    # Backup Mesh stuff
    tar -czvf "$tmp_dir"/meshcentral/mesh.tar.gz --exclude=/meshcentral/node_modules /meshcentral 2>&1 | tee -a "${currentlog}"
    mongodump --gzip --out="$tmp_dir"/meshcentral/mongo 2>&1 | tee -a "${currentlog}"

    # Backup certs
    sudo tar -czvf "$tmp_dir"/certs/etc-letsencrypt.tar.gz -C /etc/letsencrypt . 2>&1 | tee -a "${currentlog}"

    # Backup Nginx configs
    sudo tar -czvf "$tmp_dir"/nginx/etc-nginx.tar.gz -C /etc/nginx . 2>&1 | tee -a "${currentlog}"

    # Backup other config files
    sudo tar -czvf "$tmp_dir"/confd/etc-confd.tar.gz -C /etc/conf.d . 2>&1 | tee -a "${currentlog}"

    # Copy service files
    sudo cp "$sysd"/rmm.service "$sysd"/celery.service "$sysd"/celerybeat.service "$sysd"/meshcentral.service "$sysd"/nats.service "$sysd"/daphne.service "$tmp_dir"/systemd/ 2>&1 | tee -a "${currentlog}"
    if [ -f "$sysd/nats-api.service" ]; then
        sudo cp "$sysd"/nats-api.service "$tmp_dir"/systemd/ 2>&1 | tee -a "${currentlog}"
    fi

    cat /rmm/api/tacticalrmm/tacticalrmm/private/log/django_debug.log | gzip -9 > "$tmp_dir"/rmm/debug.log.gz 2>&1 | tee -a "${currentlog}"
    cp /rmm/api/tacticalrmm/tacticalrmm/local_settings.py "$tmp_dir"/rmm/ 2>&1 | tee -a "${currentlog}"

    tar -cf /rmmbackups/rmm-backup-"$dt_now".tar -C "$tmp_dir" . 2>&1 | tee -a "${currentlog}"

    # Remove temp files/folders
    rm -rf "$tmp_dir" 2>&1 | tee -a "${currentlog}"
    # Misc functions
    echo -e "\n${GREEN} Backup saved to /rmmbackups/rmm-backup-$dt_now.tar ${NC}\n" | tee -a "${currentlog}"

    return
}

# Restore T-RMM
restoreTRMM()
{
    # Set log file
    currentlog="${restorelog}"

    # Repo info for Postegres and Mongo
    # InstallFunctions
    setInstallRepos;

    # Get backup file location
    # UpdateRestoreFunctions
    getBackupFileLocation;

    # Extract backup
    # UpdateRestoreFunctions
    extractBackup "$backupfile";

    # Check if original user
    # UpdateRestoreFunctions
    checkSameUser "$INSTALL_TYPE";

    # Install NodeJS
    # Misc functions
    echo -e "\n${GREEN} Installing NodeJS... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installNodeJS;

    # Install Nginx and restore Nginx configuration
    # Misc functions
    echo -e "\n${GREEN} Installing Nginx and restoring configuration... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installNginx "$INSTALL_TYPE";

    # Restore hosts config
    # Network functions
    configHosts;

    # Restore Certbot
    # Misc functions
    echo -e "\n${GREEN} Installing Certbot... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installCertbot "$INSTALL_TYPE";

    # Restoring existing certs
    # Misc functions
    echo -e "\n${GREEN} Restoring certs... ${NC}\n" | tee -a "${currentlog}"

    sudo rm -rf /etc/letsencrypt 2>&1 | tee -a "${currentlog}"
    sudo mkdir /etc/letsencrypt 2>&1 | tee -a "${currentlog}"
    sudo tar -xzf "$tmp_dir"/certs/etc-letsencrypt.tar.gz -C /etc/letsencrypt 2>&1 | tee -a "${currentlog}"
    sudo chown root:"$USER" -R /etc/letsencrypt 2>&1 | tee -a "${currentlog}"
    sudo chmod 755 -R /etc/letsencrypt 2>&1 | tee -a "${currentlog}"

    # Recreate Nginx conf files
    # Config and Service functions
    createMeshNginxConf;
    # Config and Service functions
    createFrontendNginxConf;
    # Config and Service functions
    createBackendNginxConf;

    # Restore Celery configs
    # Misc functions
    echo -e "\n${GREEN} Restoring celery configs... ${NC}\n" | tee -a "${currentlog}"

    sudo mkdir /etc/conf.d 2>&1 | tee -a "${currentlog}"
    sudo tar -xzf "$tmp_dir"/confd/etc-confd.tar.gz -C /etc/conf.d 2>&1 | tee -a "${currentlog}"
    sudo chown "${USER}:${USER}" -R /etc/conf.d 2>&1 | tee -a "${currentlog}"

    # Restoring services
    # Misc functions
    echo -e "\n${GREEN} Restoring systemd services... ${NC}\n" | tee -a "${currentlog}"

    sudo cp "$tmp_dir"/systemd/* /etc/systemd/system/ 2>&1 | tee -a "${currentlog}"
    sudo systemctl daemon-reload 2>&1 | tee -a "${currentlog}"

    # Install Python
    # Misc functions
    echo -e "\n${GREEN} Installing Python ${PYTHON_VER}... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installPython;

    # Installing Redis
    # Misc functions
    echo -e "\n${GREEN} Installing redis... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installRedis;

    # Install and enable Postgresql
    # Misc functions
    echo -e "\n${GREEN} Installing postgresql... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installPostgresql;

    # Install and enable MongoDB
    # Misc functions
    echo -e "\n${GREEN} Installing MongoDB... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installMongo;

    # Restore Mongo database
    # Misc functions
    echo -e "\n${GREEN} Restoring MongoDB... ${NC}\n" | tee -a "${currentlog}"
    mongorestore --gzip "$tmp_dir"/meshcentral/mongo 2>&1 | tee -a "${currentlog}"

    # Clone main repo
    # Misc functions
    echo -e "\n${GREEN} Cloning primary repo... ${NC}\n" | tee -a "${currentlog}"
    # Misc functions
    clonePrimaryRepo "$INSTALL_TYPE" "$REPO_URL" "$BRANCH";

    # Clone scripts repo
    # Misc functions
    echo -e "\n${GREEN} Cloning community scripts repo... ${NC}\n" | tee -a "${currentlog}"
    # Misc functions
    cloneScriptsRepo "$INSTALL_TYPE" "$SCRIPTS_REPO_URL";

    # Installing NATS
    # Misc functions
    echo -e "\n${GREEN} Installing NATS... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installNats "$INSTALL_TYPE";

    # Restore MeshCentral
    # Misc functions
    echo -e "\n${GREEN} Restoring MeshCentral... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installMeshCentral "$INSTALL_TYPE";

    # Restore UWSGI
    # Misc functions
    echo -e "\n${GREEN} Restoring UWSGI configuration... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    createUwsgiConf;

    # Restoring other misc stuff
    cp "$tmp_dir"/rmm/local_settings.py /rmm/api/tacticalrmm/tacticalrmm/ 2>&1 | tee -a "${currentlog}"
    cp "$tmp_dir"/rmm/env /rmm/web/.env 2>&1 | tee -a "${currentlog}"
    gzip -d "$tmp_dir"/rmm/debug.log.gz 2>&1 | tee -a "${currentlog}"
    cp "$tmp_dir"/rmm/django_debug.log /rmm/api/tacticalrmm/tacticalrmm/private/log/ 2>&1 | tee -a "${currentlog}"

    # Install NATS-API
    # Misc functions
    echo -e "\n${GREEN} Installing NATS API... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installNatsApi;

    # Restore Postgres database
    # Misc functions
    echo -e "\n${GREEN} Restoring the Postgres database... ${NC}\n" | tee -a "${currentlog}"

    pgusername="$(grep -w USER /rmm/api/tacticalrmm/tacticalrmm/local_settings.py | sed 's/^.*: //' | sed 's/.//' | sed -r 's/.{2}$//')"
    pgpw="$(grep -w PASSWORD /rmm/api/tacticalrmm/tacticalrmm/local_settings.py | sed 's/^.*: //' | sed 's/.//' | sed -r 's/.{2}$//')"
    
    sudo -u postgres psql -c "DROP DATABASE IF EXISTS tacticalrmm" 2>&1 | tee -a "${currentlog}"
    # Database functions
    createPGDB;

    gzip -d "$tmp_dir"/postgres/*.psql.gz 2>&1 | tee -a "${currentlog}"
    PGPASSWORD="${pgpw} psql -h localhost -U ${pgusername} -d tacticalrmm -f $tmp_dir/postgres/db*.psql"

    # Restore Backend
    # Misc functions
    echo -e "\n${GREEN} Restoring the backend... ${NC}\n" | tee -a "${currentlog}"
    # Config and Service functions
    configureBackend "$INSTALL_TYPE";

    # Start NATS
    # Misc functions
    echo -e "\n${GREEN} Starting NATS... ${NC}\n" | tee -a "${currentlog}"
    sudo systemctl enable nats.service 2>&1 | tee -a "${currentlog}"
    sudo systemctl start nats.service 2>&1 | tee -a "${currentlog}"

    # Install frontend
    # Misc functions
    echo -e "\n${GREEN} Installing the frontend... ${NC}\n" | tee -a "${currentlog}"
    # InstallFunctions
    installFrontEnd "$INSTALL_TYPE";

    # reset perms
    sudo chown "${USER}:${USER}" -R /rmm 2>&1 | tee -a "${currentlog}"
    sudo chown "${USER}:${USER}" /var/log/celery 2>&1 | tee -a "${currentlog}"
    sudo chown "${USER}:${USER}" -R /etc/conf.d/ 2>&1 | tee -a "${currentlog}"
    sudo chown -R "${USER}:${GROUP}" /home/"${USER}"/.npm 2>&1 | tee -a "${currentlog}"
    sudo chown -R "${USER}:${GROUP}" /home/"${USER}"/.config 2>&1 | tee -a "${currentlog}"
    sudo chown -R "${USER}:${GROUP}" /home/"${USER}"/.cache 2>&1 | tee -a "${currentlog}"

    # Update services info
    sudo systemctl daemon-reload 2>&1 | tee -a "${currentlog}"

    # Enable RMM, Daphne, Celery, Nats-api, and Nginx services
    # Misc functions
    echo -e "\n${GREEN} Enabling Services... ${NC}\n" | tee -a "${currentlog}"

    for i in celery.service celerybeat.service rmm.service daphne.service nats-api.service nginx
    do
        sudo systemctl enable ${i} 2>&1 | tee -a "${currentlog}"
        sudo systemctl stop ${i} 2>&1 | tee -a "${currentlog}"
        sudo systemctl start ${i} 2>&1 | tee -a "${currentlog}"
    done
    sleep 5

    # Start MeshCentral
    # Misc functions
    echo -e "\n${GREEN} Starting meshcentral... ${NC}\n" | tee -a "${currentlog}"
    sudo systemctl enable meshcentral 2>&1 | tee -a "${currentlog}"
    sudo systemctl start meshcentral 2>&1 | tee -a "${currentlog}"

    # Done!!!!
    # Misc functions
    print_green 'Restore complete!'

    return
}

# Troubleshooting utility
troubleShoot()
{
    # Set log file
    currentlog="${checklog}"

    # Get existing domain info
    if [ -f /etc/nginx/sites-available/rmm.conf ] && [ -f /etc/nginx/sites-available/rmm.conf ] && [ -f /etc/nginx/sites-available/rmm.conf ]; then
        # Misc functions
        getExistingDomainInfo;
    else
        # User Input
        getHostAndDomainInfo;
    fi

    # Verify domains are live
    # Troubleshooting functions
    pingDomain "$rmmdomain";
    pingDomain "$frontenddomain";
    pingDomain "$meshdomain";

    # Verify IPs
    echo -e "\n${GREEN} Checking IPs... ${NC}\n" | tee -a "${currentlog}"

    # Troubleshooting functions
    checkIPisLive "$rmmdomain";
    remapiip="${reminputip}"
    checkIPisLive "$frontenddomain";
    checkIPisLive "$meshdomain";

    # Get services status
    # Troubleshooting functions
    readServicesStatus;

    # Verify services active
    # Troubleshooting functions
    checkIfServiceActive "$rmmstatus" "RMM Service";
    checkIfServiceActive "$daphnestatus" "Daphne Service";
    checkIfServiceActive "$celerystatus" "Celery Service";
    checkIfServiceActive "$celerybeatstatus" "CeleryBeat Service";
    checkIfServiceActive "$nginxstatus" "Nginx Service";
    checkIfServiceActive "$natsstatus" "NATS Service";
    checkIfServiceActive "$natsapistatus" "NATS-API Service";
    checkIfServiceActive "$meshcentralstatus" "MeshCentral Service";
    checkIfServiceActive "$mongodstatus" "MongoD Service";
    checkIfServiceActive "$postgresqlstatus" "Postgresql Service";
    checkIfServiceActive "$redisserverstatus" "Redis-Server Service";

    # Get WAN IP
    wanip=$(dig @resolver4.opendns.com myip.opendns.com +short)
    echo -e "\n${GREEN} WAN IP is $wanip. ${NC}\n" | tee -a "${currentlog}"

    # Check if ports are open
    # Troubleshooting functions
    isPortOpen "80" "HTTP";
    isPortOpen "443" "HTTPS";
    
    # Checking Proxy
    # Troubleshooting functions
    checkProxy;

    # Check for valid cert
    # Troubleshooting functions
    checkIfCertIsValid;

    # Generate log summary
    echo -e "\n${GREEN} Getting summary output of logs... ${NC}\n" | tee -a "${currentlog}"

    tail /rmm/api/tacticalrmm/tacticalrmm/private/log/django_debug.log | tee -a "${currentlog}"
	echo -e "\n" | tee -a "${currentlog}"
    tail /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log | tee -a "${currentlog}"
	echo -e "\n" | tee -a "${currentlog}"
    # Misc functions
    print_yellow "You will have a log file called checklog_$rundate.log in the directory you ran this script from."

    return
}